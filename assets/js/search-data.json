{"0": {
    "doc": "Articles",
    "title": "Articles",
    "content": " ",
    "url": "/learning-notes/articles/",
    "relUrl": "/articles/"
  },"1": {
    "doc": "Books",
    "title": "Books",
    "content": " ",
    "url": "/learning-notes/books/",
    "relUrl": "/books/"
  },"2": {
    "doc": "Learning Notes",
    "title": "Learning Notes",
    "content": "Here you can explore the notes I took on books I read, talks I watch, articles I study, and papers I love – recalling them right afterward by creating short summaries – helps a lot in my learning process. Here you’ll find some of those little pieces. | Articles | Books | Talks | Papers | . ",
    "url": "/learning-notes/",
    "relUrl": "/"
  },"3": {
    "doc": "Papers",
    "title": "Papers",
    "content": " ",
    "url": "/learning-notes/papers/",
    "relUrl": "/papers/"
  },"4": {
    "doc": "Talks",
    "title": "Talks",
    "content": " ",
    "url": "/learning-notes/talks/",
    "relUrl": "/talks/"
  },"5": {
    "doc": "Microservices by Martin Fowler",
    "title": "Microservices by Martin Fowler",
    "content": "# [Microservices by Martin Fowler](https://www.martinfowler.com/articles/microservices.html) Microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. Built around business capabilities. ## Monolith - A monolithic application built as a single unit. All your logic for handling a request runs in a single process. - A change made to a small part of the application, requires the entire monolith to be rebuilt and deployed. - It's often hard to keep a good modular structure. - Scaling requires scaling of the entire application rather than parts. ## Microservice As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary. ### Characteristics * **Componentization via Services.** Component is a unit of software that is independently replaceable and upgradeable. Libraries in-memory function calls, while services are out-of-process communicate via RPC or web requests. services are independently deployable. More explicit components. Services map to runtime processes, but that is only a first approximation. Downsides: Remote calls are more expensive than in-process calls. * **Organized around Business Capabilities.** Broad-stack implementation of software for that business area, including user-interface. Siloed funcional teams creating layered architectures (silos) vs cross-functional team and softwar organised vs capabilities (Conways law). Micro-services are cross-functioal. The necessarily more explicit separation makes it easier to keep the team boundaries clear. * **Products not Projects.** A team should own a product over its full lifetime, you build it you run it. The product mentality, ties in with the linkage to business capabilities. Rather than looking at the software as a set of functionality to be completed. * **Smart endpoints and dumb pipes.** Microservices aim to be as decoupled and as cohesive as possible. Like Unix pipes (HTTP request-response and RESTish protocols), or messaging over lighweight message bus (RabbitMQ). Issue: The biggest issue in changing a monolith into microservices lies in changing the communication pattern. * **Decentralised governance.** You can choose the apropriate technology for your service, no need to limit or standarise the technology across use cases. Prefer to use sharing battle-tested code as libraries. * **Decentralised data management.** Conceptual model of the world will differ between systems. The concept of a Bounded Context in DDD. With microservices there is a natural correlation between service and context boundaries. Decentralise data storage decisions. Let each service manage their own data. This may introduce eventual consistency. Managing inconsistencies will be a challenge. * **Infrastructure automation.** Once you have automated the deployment pipeline for monolith, doing the same for microservices won't be that hard. The operational landscape between the monolith and the microservices can be strikingly different. * **Design for failure.** Applications need to be designed so they can tolerate the failure of services. Clients have to react gracefully on service failure. Detect failures quickly and recover the service automatically if possible. Sophisticated monitoring and logging setups, up/down dashboards, relevant metrics. Details on circtuit breakers, throughput, latency… * **Evolutionary design.** Control changes in the application without slowing down change. Independent replacement and upgradeability. Evolve monoliths to miroservices, the core as the monolith and new services in microservices. Granular release planning. You only need to deploy services you modify, not all like in the monolith. Use versioning internally if necessary, but try to avoid it. --- ### Are microservices the future? Worth serious consideration for enterprise applications. The decay seen in monolith applications may be less likely with microservices architecture where boundaries are explicit and hard to patch around. In the other hand, getting boundaries right is difficult and refactoring them is important. Refactoring a distributed architecture is more difficult as interface changes need to be coordinated. Components may not compose cleanly, complexity from inside a component may move to the connections between components. There is also a factor of team skill. Probably you shouldn't start with a microservices architecture, instead begin with a monolith, keep it modular and split it into microservices once th emonolith becomes a problem. ",
    "url": "/learning-notes/articles/microservices/",
    "relUrl": "/articles/microservices/"
  },"6": {
    "doc": "Docker Workshop",
    "title": "Docker Workshop",
    "content": "# [Docker Workshop](https://www.packtpub.com/en-gb/product/the-docker-workshop-9781838983444) I am currently reading this book. These notes are therefore incomplete - [Chapter One: Running My First Docker Container](#chapter-one) - [Chapter Two: Getting Started with Dockerfiles](#chapter-two) - [Chapter Three: Managing Your Docker Images](#chapter-three) - Chapter Four - Chapter Five - Chapter Six - Chapter Seven - Chapter Eight - Chapter Nine - Chapter Ten - Chapter Eleven - Chapter Twelve - Chapter Thirteen - Chapter Fourteen - Chapter Fifteen ## Chapter One To see running containers `docker ps` - to display all the containers, even stopped ones `docker ps -a` To view the images stored locally `docker images` ### Managing Docker Containers #### docker pull - downloads a container image to the local cache `docker pull ` #### docker stop #### docker start #### docker restart #### docker attach - allows users to gain access to the primary process of a running Docker container instance - using **exit** will end the bash shell AND close the container - If you want to quit the shell, use ctrl-p then ctrl-q to exit without closing the container. #### docker exec - executes a command inside a running container `docker exec ` `docker exec -it /bin/bash` - uses your current command prompt as a bash shell for your docker container - `exit` returns to the normal shell #### docker rm - deletes a stopped container #### docker rmi - deletes a container image `docker rmi -f $(docker images -a -q)` - to delete all containers #### docker inspect - shows verbose details about the state of a container #### docker run - `-i` makes the session interactive - `-d` tells the docker to run the container in the background (daemon mode) - without `-d`, the current terminal will be taken over by the container - `-t` allows bash to run in interactive mode - `--name` gives the container a human-readable name #### docker system prune `docker system prune -fa` - removes any container images not tied to an existing running container ### PostGres CLI commands - Logging In `psql --username --password` - Listing the database `\\l` - Quitting the PSQL shell `\\q` ## Chapter Two ## Getting Started With Dockerfiles A Dockerfile is a text file that contains instructions (*directives*) on how to create a Docker image `# This is a comment DIRECTIVE argument` *directives* are case in-sensitive, but by convention, we distinguish them from arguments by writing them in all-caps ### Common Directives #### FROM - `FROM :tag>` - specifies the parent image for the build #### LABEL - `LABEL =` `LABEL version=1.0 - can include multiple labels on a single line by separating them with spaces #### RUN - `RUN ` - executes commands during image build time i. creates a new layer on tome of the existing layer ii. executes the specified command iii. commits the results to the newly created layer `RUN apt-get update` - best if we chain commands in a single line: `RUN apt-get update && apt-get install nginx -y` #### CMD - used to provide the default initialization commandexecuted when a container is created - a dockerfile can execute only one CMD directive - with multiple, only the LAST one is executed - `CMD [\"executable\", \"params1\", \"params2\", \"params3\",...]` - `CMD [\"echo\", \"Hello World\"]` - command arguments passed with the docker run command will take precedence over this directive - command is run after the image is launched #### ENTRYPOINT - also used to provide initialisation - can only be overriden by using the --entrypoint flag with the docker container run command - `ENTRYPOINT [\"executable\", \"params1\", \"params2\", \"params3\",...]` - when used with CMD, CMD holds arguments for ENTRYPOINT - with no ENTRYPOINT set, the default ENTRYPOINT is run: `/bin/sh -c`, allowing the first CMD parameters to be run as a command ### Building Docker Images - `docker image build ` `docker image build .` - `.` means that the Dockerfile should be found in the current directory - `-t`: add a tag to the image `docker image build -t my-tagged-image:v2.0` - my-tagged-image == repository name - v2.0 == tag name `docker image list` - list the available Docker images ### Other Dockerfile Directives #### ENV - sets environment variables - `ENV :` `ENV PATH $PATH:/usr/local/bin/` - multiple environment variables can be set with one line by separating them with spaces - once set, available in further layers and containers launched from this image #### ARG - `ARG ` `ARG VERSION` - used to define variables the user can pass at build time - only directive that can precede the FROM directive - can have a default value set `ARG VERSION=1.0.0` - can be set from the build command: `docker image build --build-arg =` #### WORKDIR - used to specify the working directory of the docker container - `WORKDIR ` - if the directory does not exist, mkdir will create the directory #### COPY - copies files from the local file system to the docker container - `COPY ` `COPY *.html /usr/www/html/` - **--chown** can be used to specify ownership > `COPY --chown=myuser:mygroup *.html /usr/www.html/` #### ADD - similar to COPY, but allows us to use a URL as a source - `ADD ` `ADD http://sample.com/test.txt /tmp/test.txt` - compressed files added are automatically uncompressed #### USER - Docker uses the root user as the default user of a Docker container - The Dockerfile can use USER to specify which user should be used - `USER []` - these need to be valid users and groups `USER www-data` - The default user for Apache web server is www-data #### VOLUME - In Docker, the data generated and used by Docker containers will be stored within the container filesystem - If we delete the container, the data is lost - We can use the VOLUME directive to specify a volume outside the container to separate the data from the container and even share data between containers - `VOLUME [\"\"]` - a sequence of paths sparated by spaces can be used to create multiple volumes - To inspect volume information: `docker container inspect ` - to display detailed information about the volume: `docker volume inspect ` #### EXPOSE - used to inform Docker that the container is listening on the specified ports at runtime - `EXPOSE ` - these ports are only available from within other Docker containers - to expose ports outside the docker container, we publish the ports with the -p flag `docker container run -p : ` - when using the -p command, we ALSO have to use the EXPOSE directive - the path is specified for within the container and Docker sets it somewhere on the host system #### HEALTHCHECK - `HEALTHCHECK [OPTIONS] CMD ` - only the last HEALTHCHECK option in a Dockerfile will take effect `HEALTHCHECK CMD curl -f http://localhost/ || exit 1` - the exit value at the end dictates the health: 0 == healthy, 1 == unhealthy - **--interval**: specifies the period between each health check (default 30s) - **--timeout**: if no success response isreceived within this period, check fails (default 30s) - **--start-period**: how long to wait before running the first health check (0s) - **--retries**: HEALTHCHECK will retry this many times, and only fail after all of them (3 tries) #### ONBUILD - creates a reusable docker image to be used for another docker image - `ONBUILD ` `ONBUILD ENTRYPOINT [\"echo\", \"Running ONBUILD directive\"]` - does not run when built, only runs when this image is used for a child image #### Sample PHP Dockerfile: ``` FROM ubuntu:18.04 LABEL version=1.0.0 ENV DEBIAN_FRONTEN=non-interactive RUN apt-get update && apt-get -y install apache php curl COPY *.php /var/www/html WORKDIR /var/www/html HEALTHCHECK --interval=5s --timeout=3s --retries=3 CMD curl -f http://localhost || exit 1 EXPOSE 80 ENTRYPOINT [\"apache2ctl\", \"-D\", \"FOREGROUND\"] ``` ## Chapter Three ## Managing your Docker Images ",
    "url": "/learning-notes/books/docker-workshop/",
    "relUrl": "/books/docker-workshop/"
  },"7": {
    "doc": "Escaping the Build Trap",
    "title": "Escaping the Build Trap",
    "content": "# Escaping the Build Trap [I have indeed read this book, but these notes below are from [keyvanakbary](https://github.com/keyvanakbary/learning-notes)] - [The value exchange system](#the-value-exchange-system) - [Constraints on the value exchange system](#constraints-on-the-value-exchange-system) - [Project vs Products vs Services](#project-vs-products-vs-services) - [The product-led organisation](#the-product-led-organisation) - [Sales-led](#sales-led) - [Visionary-led](#visionary-led) - [Technology-led](#technology-led) - [Product-led](#product-led) - [What we know and what we don't](#what-we-know-and-what-we-dont) - [The role of a product manager](#the-role-of-a-product-manager) - [Bad product manager archetypes](#bad-product-manager-archetypes) - [The mini-CEO](#the-mini-ceo) - [The waiter](#the-waiter) - [The former project manager](#the-former-project-manager) - [A great product manager](#a-great-product-manager) - [Tech expert versus market expert](#tech-expert-versus-market-expert) - [A great product manager](#a-great-product-manager-1) - [Start with the why](#start-with-the-why) - [One role, many responsibilities](#one-role-many-responsibilities) - [The product manager career path](#the-product-manager-career-path) - [Organising your teams](#organising-your-teams) - [Strategy](#strategy) - [What is strategy?](#what-is-strategy) - [Strategic gaps](#strategic-gaps) - [Creating a good strategic framework](#creating-a-good-strategic-framework) - [Company-level vision and strategic intents](#company-level-vision-and-strategic-intents) - [Product vision and portfolio](#product-vision-and-portfolio) - [Product management process](#product-management-process) - [The product kata](#the-product-kata) - [Understanding the direction and setting success metrics](#understanding-the-direction-and-setting-success-metrics) - [Problem exploration](#problem-exploration) - [Solution exploration](#solution-exploration) - [Building and optimising your solution](#building-and-optimising-your-solution) - [The product-led organisation](#the-product-led-organisation-1) - [Outcome-focused communication](#outcome-focused-communication) - [Rewards and incentives](#rewards-and-incentives) - [Safety and learning](#safety-and-learning) - [Budgeting](#budgeting) - [Customer centricity](#customer-centricity) - [Escaping the build trap to become product-led](#escaping-the-build-trap-to-become-product-led) - [Six questions to determine wheter a company is product-led](#six-questions-to-determine-wheter-a-company-is-product-led) The build trap is when organizations become stuck measuring their success by outputs rather than outcomes, when they focus more on shipping and developing features rather thant he actual value those things produce. When companies stop producing real value for the users, they begin to lose market share. You need to look at the entire company, not just at the development team. Are you optimising your organisation to continually produce value? Are you set up to grow and sustain products as a company? ## The value exchange system Companies end up in the build trap when they misunderstand value. Instead of associating value with outcomes, they measure value by the number of things they produce. Customers realises _value_ when their problems are solved. Then and only then do they provide value back to the business. Every feature you build should result in some outcome that is tied back to that business value. **When companies do not understand their customers' or users' problems, they cannot possibility define value for them.** Sometimes companies fall under the catch-up game, trying to fast-follow its competitors. This is what happened with Google+ and Facebook, never differentiating enough, just copying. Companies do also overpromise during their sales process, giving customers whatever they take to get the contract signed. The result is a ton of one-off features that satisfied the needs of only one client,r ather than a strategic choice to build what would scale for many clients. Organisations get stuck in reactive mode, without building with intent. You have to get to know your customers and users, deeply understanding their needs. Companies need to get their employees closer to their customers and users so that they can learn from them. ## Constraints on the value exchange system Your customers and users don't exist in a vacuum, their wants and needs change according to what's around them. The only thing we can do is understand them better to know how to act. Even thought businesses cannot control the customer side, they have full control over their own constraints. > Raise your hand if you went back and iterated on the last thing you shipped > How do you know that what you shipped was successful? If your answer is around deadlines and finishing with bug-free code, you're likely in a company optimised for _outputs_ instead of _outcomes_. **_Outputs_ are easily quantified things that we produce, like the number of products, features, releases, velocity, etc. _Outcomes_ are the things that result when we finally deliver those features ant the customer problems are solved.** For most companies, their entire structure is optimised to increase the output. To be strategic, we should define and measure value and then celebrate them for delivering on outcomes for our business and users. ## Project vs Products vs Services * **Project** Scope out work to be done, create deadlines and milestones, and then have the team get to work. * **Products** Deliver value repeatedly to customers and users, without requiring to build something new every time. * **Services** Unlike products, they use human labor to primarily deliver value to the user. Many companies use a combination of products and services to deliver value. **A _project_ is a discrete scope of work that has a particular aim. Projects are an essential part of product development, but the mentality of thinking only in projects will cause damage.** A feature enhancement is a project, but your work may not be done when you are finished. You need to keep iterating by scoping out new projects to reach the overall outcome to be successful. ## The product-led organisation **_Product-led_ companies understand that the success of their products is the primary driver of growth and value for their company.** Many companies are instead lead by sales, visionaries or technology, which all land you in the build trap. ### Sales-led Companies let their contracts define their product strategy. Like having 30 features that no-one uses. Many small companies start of as sales-led, and that can be okay. This way of working does not scale for long. When you have 50 to 100 customers or more, you need to change your strategy to building features that apply to everyone, without customisation. ### Visionary-led Consider Apple and Steve Jobs. These type of companies can be very powerful, when you have the right visionary. However, is not sustainable. Innovation needs to be baked in to the system so that one person is not the weakness link. ### Technology-led Companies that are driven by the latest and coolest technology. They often suffer from the lak of a market-facing, value-led strategy. Technology is critical to a software company success, but it cannot drive the product strategy. Product strategy connects the business, market, and technology together. You need to be able to lead with a value proposition for your users, or you will not be able to make money. ### Product-led Companies that optimise for their business outcomes. You don't need to hire an entire new team, but changing the mindset is a challenge. **You need to begin focusing on outcomes and to adopt an experimental mindset to eliminate uncertainty that what you are building will reach your goals.** ## What we know and what we don't Product development is full of uncertainty. It's important to separate out the facts from the things that we need to learn. When kicking off a project, it's best to begin by identifying what you know to be true about the situation, your _known knowns_. Facts that you gather from data or critical requirements from customers. You need to separate these items out as facts and to label those that you are unsure about as our _known unknowns_. Assumptions that you want to test, turn them into facts, and build to satisfy those facts. **Although we should all listen to our intuition, you should be cautious because this is often where bias thrives.** The _unknowns unknowns_ are the things that you don't know you don't know. They pop up during research. **Product management is the domain of recognising and investigating the known unknowns and of reducing the universe around the unknown unknowns.** Product managers identify features and products that will solve customer problems while achieving business goals. They optimise the Value Exchange System. **Product managers are the key to becoming product-led.** ### The role of a product manager A Product manager deeply understands both the business and the customer. They are responsible for synthesising multiple pieces of data, and then determining in which direction the team should move. They keep the team focused on the _why_ are we building this product, and what outcome will it produce? The Chief Product Officer ties together the business outocmes to the roadmpap and represents its impact back to the board. ## Bad product manager archetypes Under a _Waterfall_ process, the first step for a product manager is to talk to _internal stakeholders_ and ask them for their input and requests. This encourages product managers to always satisfy their stakeholders. After requirements are detailed out, they are usually handled to the designers to create an attractive-looking interface. After the product managers approve the designers' work, the software engineers can begin coding. Coding typically takes months, and for large projects, it can even take years. Many companies have adopted Agile as it was a silver bullet. Agiles does indeed promote a better way of collaboration and faster method of building software, but it largely ignore how to do effective product management. When you go through the motions without active thinking, you end up with a lot of useless features. **We rarely teach product managers how to think, and even if we do, we don't measure this thinking process.** Some common archetypes of bad product managers ### The mini-CEO Product managers are not the mini-CEOs of a product. Product managers can't change many things a CEO can in an organisation. They don't have the authority over people – because they are not people managers and they need to rely on influencing them. This is a very arrogant product manager archetype who thinks they rule the world. **The job of a product manager is to produce value, not to develop your own ideas.** > Start listening to your team. Involve them. Listen to your customers and focus on their problems instead of your own solutions. Fall in love with those problems. Validate your dideas. Turn to concrete evidence, rather than opinions. Listening to everyone's opinion is important, but it doesn't mean a product manager should implement every suggestion. ### The waiter This is a product manager who is an order taker. They go to their stakeholders, customers, or managers, ask for what they want, and turn those wants into a list of items to be developed. There is no goal. There is no vision. There is no decision making involved. This is usually the role of a _product owner_. So, how these people prioritise? More often than not, the most important person gets their features prioritised. Instead of discovering problems, waiters ask \"What do you want?\" They implement ideas without validating them. **It's not the customer's job to come up with their own solutions. That is the product manager job.** Waiters are reactive thinkers, not strategic thinkers. Pushing back is essential to building a successful product. **Project managers who are put into product management roles often become waiters waving a calendar.** ### The former project manager Product managers are not project managers. Project managers are responsible for the _when_. Product managers are responsible for the _why_, why are we building this? How does it deliver value to our customers? How does it help meet the goals of the business? **Agile methodologies distribute the responsibilities of the project manager across the team. These cross-functional teams have all the key players dedicated to ship a feature, so less coordination is needed across departments. Thus, project management is not needed.** Answering _why_ is very different than answering _when_. It requires a strategic mindset. ## A great product manager The role of a product manager is to work with a team to create the right product that balances business needs with solving user problems. They understand many sides of the company. They need to understand the market and how the business works. They need to truly understand the vision and the goal of the company. They must have deep empathy for the users. **The \"product manager\" title is misleading, as an effective product manager is not really a manager. To be effective, product managers need to recognise team members' strengths and work with them to achieve the common goal. They need to convince their team and the company on the things they are working are the right things to be building. Influencing skills are essential.** Product managers really own the _why_, of what they are building. **They work with the team to develop ideas and jump in once requirements get validated to make sure that the product being created achieves the goals of the customer, user, and business. It's the team, collectively, that really owns the product, the _what_.** Product managers should be at the helm of experimentation. Product managers connect the dots. They must be humble, they recognise they don't know all the answers. **The ultimate goal for a product manager is to reduce the risk by focusing on learning.** ### Tech expert versus market expert Great product managers will get further by taking advantage of the skills and expertise of their team. **Product management is about looking at the entire system and figuring out how it can product revenue for the company.** Product managers need to know just enough to talk with an engineer or a business person. **A product manager must be tech literate, not tech fluent in order to make good trade-off decisions.** Although it's valuable for a product manager to know the market well, this is something they can learn. ### A great product manager Always focus on the problem. If you anchor yourself with the _why_, you will be more likely to build the right thing. ### Start with the _why_ * Why are we making everything digital in the mortgage space? * Why even do this project? * What's the desired result that we hope to achieve here? * What does success look like? * What happens if we make it all digital and nobody applies for mortgages? * How are we mitigating that risk? Too often, product managers dive into creating solutions without thinking through the associated risks. When organisations hand down solutions, they skip setting success metrics and goals. The biggest issue reported by leaders is that product managers won't step up and \"own the product\". Product managers can and should question solutions and push back on things handed down. However, the work required to gather data and prove the solution takes time. There is some confusion between a _product owner_ and a _product manager_. In Scrum literature, a product owner: * Define the product backlog and create actionable user stories for the development teams. * Groom and prioritise the work in the backlog. * Accept the completed user stories to make sure the work fulfills the criteria. **Product owner is a _role_ you play on a Scrum team. Product manager is a _career_.** Product management and Scrum can work well together, but product management is not dependent on Scrum. **Most organisations do not give their people the necessary time to do product vision and research work. They would rather hold them responsible for a steady stream of outputs and measure success based on stacking backlogs and writing stories.** Product managers play some key roles, but one of the most important ones is being able to marry the business goals with the customer goals to achieve value. Good product managers figure out how to achieve goals for the business by creating or optimising products, all with a view toward solving actual customer problems. ### One role, many responsibilities Without a Scrum team or with a smaller team, you might be doing more strategy and validation work for a product that has not been defined yet. With a Scrum team, you might be more focused on the execution of solutions. As a manager of product managers, you might be leading strategy for a larger part of the product and coaching your teams to discover and execute well. **With a good strategy framework in place and ruthless prioritisation around a few key goals, one person can effectively talk to customers, understand their problems, and help to define the solutions with the team.** ### The product manager career path _Tactical work_ for a product manager focuses on the shorter-term actions of building features and getting out of the door, scoping out work and crunching the data to determine what to do next. _Strategic work_ is about positioning the product and the company to win in the market and achieve goals, it looks like the future state of the product and company. _Operational work_ is about tying the strategy back to the tactical work. Here is were Product Managers create a roadmap that connects the current and the future state of the product. #### Associate product manager Open up this role to people making the switch into product management. Pair them with a senior product manager to teach them the ropes. #### Product manager Works with a development team and UX designers to ideate and build the right solutions for the customers, talking to users, synthesising the data, making the decisions from a feature perspective. Product managers are usually responsible for a feature or a set of features part of a larger product. The product manager needs to be strategic enough to help craft the vision of the features and how they fit into the overall product but tactical enough to ensure a smooth execution of the solution. They tend to skew more operational than strategic at this level due to their shorter-term impact the delivery of the roadmap. The danger is when a product manager is 100% operational, focusing only on shipping products and not on optimising the feature. When they optimise for the day-to-day execution of the team they usually fall behind in the necessary strategy and vision for the features to succeed. **It's imperative to push back as much project management effort as possible to the team and trust them to deliver.** Product managers are part of a larger product team, feeding data about the success of features to product people. This helps inform the strategy and direction of the product portfolio and organisation. #### Senior product manager Same as product managers but they also oversee more scope or a more complex product. It is as high in the product management field as you can go as an individual contributor. They want to focus on building products instead of growing a team. You must balance being highly strategic and highly operational. This role is for people who like difficult product problems. They are usually entrepreneurial, and that's a great trait because they will be the ones to start new product lines for businesses. #### Director of product At a certain point, the company will grow enough that there are too many people reporting into the head of product. A director of product becomes necessary to help promote strategic alignment and operational efficiency. They oversee a group of product managers who are aligned around a product in a portfolio or a product line. They ar responsible for the strategic roadmap of the product, making sure all product managers are aligned by the appropriate goals and working in the most important items to move the product forward. #### VP of product This is someone who oversees the strategy and operations for an entire product line. They set the vision and goals for the overall product. In large enterprises they are also directly responsible for financial success of their product line, not just the delivery of product features. A VP of product is usually the highest level in smaller companies because there is only one product and not multiple product lines. A successful VP of product needs to fundamentally be more of a strategic person and they know that in order to scale their organisation, they need to hire in people who take over the tactical and operational components. #### Chief product officer A CPO oversees a company's entire product portfolio and they ensure it works together to achieve the company goals. Although a VP of product needs to understand how their product roadmap affects the economics of the company, a CPO needs to do that across all products. They work with VPs of product to ensure that every product is strategically aligned to the company's objectives and each product has what it needs, from a resource and people perspective, to reach the established goals. A CPO needs to be able to interface at the board level. A successful CPO needs to be able to translate their actions into terms the board will understand. > They inspire confidence, empathise, and are relentless and resilient To inspire confidence, **CPOs work across many functions to gain buy-in and alignment, they get through things through influence versus direct authority**. By empathising with the other members of their peer group, their customers and their teams, CPOs can find a way forward that aligns all the goals. Finally, a CPO must be relentless and resilient. They need to desire to dig in and find out what is working and what is not, assessing and analysing, trying to prove their hypothesis right and wrong, and holding themselves accountable to data. Having a strong product leader in the C-Suite is a critical step to becoming product-led. ### Organising your teams Companies tend to organise in three main ways: value streams, features, and technical components. Teams organised around features usually do so in order to get ownership over every part of the product, although this is good if you are starting from scratch, it promotes a very output-oriented mindset. We tend to look for ways to develop more things related to our little slice of the product. When features are stable, we should monitor them and then move on to more important work needed to support our strategy. When companies are small, you can organise effectively around goals you are trying to reach. This is the case for TransferWise. One team is focused on retention, another on implementing new currencies, and another on acquiring customers. Each of these teams has ownership of their goal and is judged for success based on their outcomes. It takes a huge amount of coordination across the product teams, so everyone is responsible for collaborating intensely with one another. This structure creates a nice redundancy across the company, so important information about a single product is not stuck in the head of one person. As companies scale, this may not be a viable option. A _value stream_ is all activities needed to deliver value to the customer. That includes process from discovering the problem, setting goals, and conceiving of the idea, to delivering the actual product or service. Every organisation should strive to optimise this flow in order to get value out the door faster to customers, and in order to do so, it makes sense to organise your teams around the value stream. First you begin with the customer or user, whomever is consuming your product at the end of the day. What is the value that you are providing to them? Then work backward. FInd the touchpoints they have with your company to receive that value. How do you organise to optimise and streamline that journey for them? How do you optimise to provide more value, faster? Many companies are confused by the word _product_. If your app, interface, or feature is not inherently adding value on its own, it's just a piece of the entire product. You have to look beyond just that piece to understand how to manage for value delivery and creation. For example, car insurance provides peace of mind in case you get into an accident, that's value. An iPhone app that allows you to manage your car insurance is only a piece of that product's value stream; the app on its own is not enough value. You can still have a product manager owning that iPhone app experience, but you must make sure that they are part of a larger division that holds the true value, the car insurance division. This structure makes it possible to set strategy at the division level. with the product manager able to execute on product initiatives that tie to their product. Keeping the strategy and the value execution together is key. By minimising the number of layers and by giving product managers more scope over their product areas, you can effectively create a product organisation with a structure that supports the product strategy. #### Marquetly's product team > The company had 20 product teams organised around components. \"How should we build this organisation?\" \"We need to restructure around value streams\". We needed to start by hiring an experienced chief product officer. We have a great VP of product, good at the tactical and strategic work for a single product vision, but unfortunately she doesn't understand how to manage a portfolio of products. We also need more senior people. > > You can't build an organisational structure without a product vision, because the value streams are not apparent. > > To make considerable impact, you need to have everyone going in the same direction, working toward the same goals. ## Strategy A good strategy is not a plan; it's a framework that helps you make decisions. Product strategy connects the vision and economic outcomes of the company back to product portfolio, individual product initiatives, and solution options for the teams. Strategy creation is the process of determining the direction of the company and developing the framework in which people make decisions. Netflix's vision in 2005 was \"to provide movies and TV shows in the most convenient and easy way for customers\", they didn't see DVDs as the end point. They knew that if they truly wanted to become the most convenient vehicle by which people would watch movies, it had to figure out a way to get entertainment into the hands of its users faster. Because they started early on, their streaming technology wasn't fast enough to download movies, but once the internet got faster they company expected to see more people downloading videos. But it didn't happen. Netflix realised that only internet-enabled devices at the time were laptops and home computers, and that they weren't the most convenient and delightful way to watch movies. Netflix decided to build its own internet-connected device plugged into TVs for years but a few days before lunch, Reed Hastings shut it down. Hastings realised if they launched their own devide, they couldn't partner with anyone else. He would be in the business of hardware, not software or entertainment, and that wasn't part of Netflix core vision; it didn't align with the overall strategy. Netflix is an example of a company that got out of the build trap, they focused the entire company around a solid vision \"becoming the best global entertainment distribution service, licensing entertainment content around the world, creating markets that are accesible to film makers, and helping content creators around the world to find a global audience\". This vision states not only why the company exists but also the plan for getting there. Netflix self-organised around key outcomes and strategies to help reach its goals. Gibson Biddle, who was VP of product at Netflix aligned his team around a common guideline for evaluating its product strategy \"delight customers, in margin-enhancing, hard-to-copy ways\". Key strategies | Tactics | Metrics -----------------|------------------------------------------------------|-------- Personalised | Ratings Wizard, Netflix Prize | % of customers who rate >= 50 titles at 6 weeks; RMSE Instant | Hub expansion, streaming | % of disks delivered in one day; % of customers who watch >= 15 min/month Margin-enhancing | Previously viewed, advertising, price & plan testing | Gross margin, LTV Easy | Simplify and kill; progressive disclosure | % of customers with >= titles in queue on day one **The powerful thing about a strategic framework is that it forces you to think about the whole before zooming in on the details.** When a company thinks only about the feature-level model, it loses track of the outcomes those features should produce. ### What is strategy? You can't figure out the right product until you know what problem are you solving. Often people don't want a strategy, they want a plan. A good strategy isn't a detailed plan. It's a framework that helps you make decisions. Many companies spend months in \"strategic planning\" for the following year, creating comprehensive and detailed outlines of the tasks they will accomplish, the cost of those actions, and the revenue they will generate. **Thinking of strategy as a plan is what gets us into the build trap.** Stephan Bungay, one of the most respected leaders in strategy deployment and creation, in his book \"The Art of Action\" he writes: > Strategy is a deployable decision-making framework, enabling action to achieve desired outcomes, constrained by current capabilities, coherently aligned to the existing context. ### Strategic gaps While studying strategy in many organisations, Stephen Bungay discovered that when companies approach strategy as a plan, they often fail. #### The knowledge gap The Knowledge Gap is the difference between what management would like to know and what the company actually knows. Instead of seeking more detailed information, upper management should be limiting its direction to defining and communicating the _strategic intent_, or the goals of the business. **The strategic intent communicates where the company is heading and what it desires to achieve when it gets there, it points the team toward the outcomes the business wants to achieve. The company needs to provide room for experimentation and to understand the _why_ before it could suggest the _how_ to solve the problem.** > We know there is a problem, the next step is to discover that problem, tackle it with a solution, and then try to optimise the solution so we can increase acquisition. #### The alignment gap **This is the difference between what people do and what management wants them to do, which is to achieve business goals. Organisations try to fill this gap by providing more detailed instruction; whereas, instead, they should allow each level within the company to define how it will achieve the intent of the next level up.** > At one company, I walked around asking all of the product managers on the hundred or so teams why they were working on their current project. I then asked their leaders the same question. I got two different answers. They could not connect the activities of the teams back to the outcomes of the companies because leadership had passed down feature requests rather than expected outcomes and goals. As soon as those feature requests were committed, it was nearly impossible to change them because the company expected them to be delivered. > **When teams realise customers don't want their solution, they should have the freedom to explore alternative solutions. This is how a product-led organisation should operate.** Product teams need the freedom to explore solutions and to adjust their actions according to the data they receive. Management should feel comfortable granting the necessary autonomy to capable teams. **Instead of sending down mandates, organisations should, instead, turn to aligning every level of the company around the _why_ and should give the next layer down the opportunity to figure out the _how_ and report back.** When leadership is not aligned at the top, the issues trickle all the way down to teams. #### The effects gap This is the difference between what we expect our actions to achieve and what actually happens. When organisations do not see the results they want, they try to fill the gap by putting more controls in place. However, that is the worst thing you can do in this scenario. Giving individuals and teams the freedom to adjust their actions so that they are in line with their goals is what truly allows them to achieve results. We should strive to align teams with a framework of goals and direction and then stepping back to give that team the room to explore. Prescribing fully though-out solutions restricts product teams to only those parameters instead of being able to focus on learning and adjusting their decisions as they go. You need to view strategy in a different way. You should enable action to achieve results. #### Autonomous teams At Marketly, Product Managers often said > I keep having leaders tell me to own the vision of my product, but I'm not allowed. My manager keeps handling me solutions. Every time I try to suggest something different, I'm shut down. In contrast to what leaders said > Our product managers won't step up and own the product. I have to keep prescribing things for them, but it's because they don't take initiative. When teams are not aligned with a clear direction and goals, they cannot effectively make decisions. If they dare to try, much of the time, the leader steps in and says \"No, that's not right\". **Autonomy is what allows organisations to scale. The alternative is hiring hundreds of thousands of middle managers that lead by authority, telling people what to do. Which is not only inefficient but also causes unnecessary layers in management and a lot of frustration.** Leading by authority is a relic of industrial-age methodologies, when low-skilled workers were supervised closely so that their output was maximised. **In the world of software, we don't work this way in.** When you have that sort of talent, you need to give people room to make decisions so that you can get the full benefit of their knowledge and skill. That's what a strategic framework promotes. ### Creating a good strategic framework Marketly CEO originally thought the issues were with the development teams \"they aren't going fast enough, they are slacking off\", and although the company had OKRs, they were very output-oriented instead of outcome-oriented \"Ship the first version of the new teacher platform\" or \"Delivery by June 2018\". Key results weren't tied to any outcome, either business or user-oriented. Everyone would emerge with a list of features to build and then dole them out to the product managers. Product managers then were responsible for estimating. After reporting estimates back, they would then plan the budget to organise the roadmap. Goals were set on the leadership level, as well. Every part of the company was measuring something and yet, the company was not meeting its goals for the past years. The issues detected were a few. The leadership team was prioritising the work itself, based on what it thought it was right to build rather than on feedback by customers. It was reacting to the customers that screamed the loudest instead of evaluating whether those requests matched the strategic objectives. The morale was low. **A good company strategy should be made up of two parts: the operational framework, or how to keep the day-to-day activities of a company moving; and the strategic framework, or how the company realises the vision through product and service deployment in the market.** Trying budgeting, strategy, and product development to an artificial yearly time cycle only creates a lack of focus and follow-through. Think of the major pieces of work you do that are actually _bets_. Spotify operates using something called DIBBs (Data, Insights, Beliefs, and Bets). The concept of thinking of initiatives as bets is powerful because it sets up a different type of expectation. Spotify sets up an environment in which it's safe to try new things and fail. #### Strategy deployment Strategies are interconnecting stories told through the organisation. > Agile teams are really good at telling two-to-four-week stories. As you go up in the organisation, you tell stories with longer timespans. Executives are really goodat telling five-year stories, but a team cannot act on a five-year story when they're used to thinking in two-to-four weeks. – Jade Bloom While executives might be looking at a five-year strategy, middle management is thinking in smaller strategies – yearly or quarterly – bounding teams in a direction that allows them to make decisions on a monthly to weekly basis. When teams are not sufficiently constrained, they become stuck > They feel like they cannot make a decision because there are too many options – Jade Bloom Not having the right level of direction lands us in the build trap. OKRs is a type of strategy deployment used by Google. Hoshin Kanri is a strategy deployment method used by Toyota. Even the military uses strategy deployment with mission command. Setting the direction for each level of an organisation so they can act. In most product organisations there should be four major levels in strategy deployment: * Vision * Strategic intent * Product initiatives * Options #### Strategy creation Is the process of figuring out which direction the company should act. This takes time and focus to craft and maintain. You need to be identifying problems and determining how to organise around solving them at every level. If you are in the C-Suite this should be your top priority. You must first understand the vision, or where you want to go. Then we can identify problems or obstacles standing in our way. In Toyota, the continuous improvement framework is called the Improvement Kata. The Kata teaches people in the company how to strategically tackle problems to reach goals (explained in Mike Rother's book Toyota Kata). Through this act of exploring and identifying problems, you uncover data that is needed to help inform the strategy and vision. Vision is not set solely top-down by management. The entire organisation should be sharing information as they learn about. Bloom calls this information Physics. > The teams should be out there, analysing, testing, and learning and then communicating what they discover back to their peers and their management teams. This is how we set strategy. **This process of communicating data and direction up and down – and across – the organisation is how we maintain alignment.** ### Company-level vision and strategic intents #### Company vision The company vision sets the direction and provides meaning for everything that follows. Amazon is an example of a company with a great vision and strategy: > To be Earth's most customer-centric company where customers can find and discover anything they might want to buy online, and endeavors to offer its customers the lowest possible prices If you are a single-product company, your company's vision is very similar or even the same as your product vision. By keeping an eye on the overall vision, people can make effective decisions about the things that they should and shouldn't pursue. The strategy needs to start at the corporate level, moving through the business lines, and ultimately arriving at the products. At these types of companies, products are just details on how the company vision is manifested. They are the vehicles for value. **A good _mission_ explains why the company exists. A _vision_ explains where the company is going based on that purpose.** The best thing a company can do is to combine both the mission and vision in one statement to provide the value proposition of the company – what the company does, why it does it, and how it wins doing that. Examples of compelling vision statements: > At Bank of America, we are guided by a common purpose to help financial lives better by connecting clients and communities to the resources they need to be successful – Bank of America > Becoming the best global entertainment distribution service, licensing entertainment content around the world, creating markets that are accessible to film-makers, and helping content creators around the world to find a global audience – Netflix **They are short, memorable, and clearly articulated. They don't include fluffy terminology.** You do need to focus your company around where you want to concentrate. **It's okay to want to be the best on the market or the market leader, but you need to give some context on how.** Leaders need to spend time communicating their vision, you must tell a story. The difficult part is connecting the vision back to the company's operations. This is where company leaders must specify _strategic intents_. #### Strategic intents This is how you intent to reach that vision changes as your company matures and develops. **Strategic intents communicate the company's current areas of focus that help realise the vision.** When determining the intents, the C-Suite of the company should ask **\"what is the most important thing we can do to reach our vision, based on where we are now?\"** These should not be laundry list of desires or goals, **they just need to be a few key things that need to happen to make a big leap forward.** Instead of dictating these solutions down to the teams, leadership should focus on creating strategic intents. **Getting the right level and number of intents is very important. Too many higher-level goals, and you are back to peanut buttering.** One intent is usually good for a small company, and three are plenty for a large organisation. Strategic intents are about the whole company, not just the product solution. ### Product vision and portfolio **Product initiatives translate the business goals into the problems that we will solve with our product.** The product initiatives answer _how_? A product initiative could be something like the following: > As a Netflix subscriber, I want to be able to watch Netflix anywhere, with anyone, comfortably. There are many solutions (_options_) to solve this problem, and they have to be aligned to this product initiative. **Options are your bets, sometimes the solution will be readily apparent, but other times you need to experiment to find the solution.** **Product initiatives set the direction for the product teams to explore options.** #### Product vision Companies often have trouble aligning around a _product vision_. Often they end up with too many products and no coherent vision. Building one-off products to satisfy individual customer requests, failing to address a wider audience. Too many people, too little direction, and no holistic approach. Often revealing a bigger issue, the lack of an overall vision. Although delivering multiple features and delivering value is a good thing, **we need something to tie it all together at the top. The product vision communicates why you are building something and what the value proposition is for the customer.** The product vision emerges from experimentation, you need to be careful not to make the product vision too specific. **It cannot describe every little feature but should include more of the main capabilities it enables for the user**. An example for a vision at Marketly: > We help marketing professionals to advance their skills by allowing them to understand their current competencies, easily find the most relevant classes to get to the next level, and then learn the skills they need in the most engaging and digestible fashion, from world-class teaches in the marketing space. The VP of Product should make sure everyone is aligned with this holistic vision. #### Product portfolio Companies with more than one product wrap their products under what is called a _product portfolio_. The CPO is responsible for setting the direction and overseeing the product portfolio. The CPO answers these questions for their team: * How do all of our products work as a system to provide value to our customers? * What unique value does each of the product lines offer that makes this a compelling system? * What overall values and guidelines should we consider when deciding on new product solutions? * What should we stop doing or building because it does not serve this vision? Leaders often complain that they don't have time to innovate. Usually, this is due to poor capacity planning and strategy creation. **It's not that you don't have time to innovate; it's that you are not _making time_ to innovate. You are going to need to say no to some things.** ### Product management process > #### Marketly product initiatives > > We believe that by increasing the amount of content in our site in key areas of interest, we can acquire more individual users and retain existing users, resulting in a potential revenue increase of $2,6555,000 per month from individual users. > > _Options to explore_: > * Easier and faster ways for teachers to create courses > * Feedback loops for teachers on areas of interest for students > * Outreach to new teachers who can create courses in areas of interest **Usually, when we think about processes, we focus more on the act of developing software than we do about building the right software. This is the build trap.** ### The product kata The process by which we uncover the right solutions to build is called the [Product Kata](https://melissaperri.com/blog/2015/07/22/the-product-kata). The Product Kata is highly inspired by the Toyota Kata, which was a Continuous Improvement framework that creates the habit of improving by focusing on learning. It teaches you how to analyse problems and then create small experiments to solve them. Every team member is responsible for improving the company's processes. 1. Understand the **direction**. What challenge are you striving to meet? 2. Grasp the current **condition**. What is the process's current pattern? 3. Establish the next **target condition**. What pattern do you want to have next? 4. **Plan-do-check-act (cycle)** toward the target condition. The step-by-step discovery process between where you are and where you want to be next. Management will set the challenge while teams grasp the current condition and establish target conditions. Next, you follow the Coaching Kata to plan the steps to get to the next target condition. The coach is a team member who asks the following questions during every meeting. The whole team answers and plans the work. The questions are the following: 1. What is the **target condition**? 2. What is the **actual condition**? Reflect on the last step taken. You don't actually know what the result of a step will be! 1. What was your **last step**? 2. What did you **expect**? 3. What **actually happened**? 4. What did you **learn**? 3. What **obstacles** do you think are preventing you from reaching the target condition? Which **one* are you addressing now? 4. What is your **next step**? (next plan-do-check-act cycle / experiment) What do you expect? 5. When can we go and see what we **have learned** from taking that step? Reflect on the last step taken. You don't actually know what the result of a step will be! 1. What was your **last step**? 2. What did you **expect**? 3. What **actually happened**? 4. What did you **learn**? Now the process applied to Product is what is called Product kata and the continuous product improvement 1. Company goal, product KPI, future state. 2. What are the users doing now? (planning) 3. What is the first little goal? 4. User research, product experiments (experimenting) --- The first task is to get to the product initiative and determine what problems you can solve to further the strategic intent. We then need to break the success metrics into something we can measure on a shorter time scale. We call this the _team goal_, and it's how we measure the success of the option. The team goal should be something we can measure after every release. #### Context matters After we have set the goal, we begin walking the Product Kata: 1. What is the goal? 2. Where are we now in relation to that goal? 3. What is the biggest problem or obstacle standing in the way of me reaching that goal? 4. How do I try to solve that problem? 5. What do I expect to happen (hypothesis)? 6. What actually happened, and what did we learn? We answer questions one through four to figure out how to plan our next move as a team. Five and six, determine whether to go back to the beginning for the next round. These questions take us to problem exploration, solution exploration and solution optimisation. When considering whether to experiment around a particular solution > Don't spend your time overdesigning and creating unique, innovative solutions for things that are not core to your value proposition. If someone has already solved that problem with a best practice, learn from that, implement their solutions, gather data to determine if it's successful in your situation, and then iterate. Reserve your time and energy for the things that will make or break your value proposition. – Zappos former head of UZ, Brian Kalma When the problem that you are solving is core to your value proposition, take a step back and don't rush into the first solution. The best thing you can do at the experimentation stage is to kill the bad ideas! The fewer, the better. ### Understanding the direction and setting success metrics #### Product metrics Metrics tell you how healthy is your product, and ultimately, your business. Unfortunately, teams end up measuring **_vanity metrics_. Goals that look shiny and impressive because they always get bigger.** For example, people get excited by the number of users they have on their product, the daily page views, or how many logins their system has. These metrics do not cause you to change your behavior or priorities. You can easily turn a vanity metric into an actionable metric by adding a time component to it. For example, do you have more users this month than the last? Consider the meaning behind the metrics and how they help inform your decisions and understanding. Additionally, product teams often measure output-oriented metrics such as the number of features shipped, story points complete or user stories worked on. Although these are good productivity metrics, these are not product metrics. They cannot tie the results of product development back to the business. There are many product frameworks available to help you think about the appropriate product goals. #### Pirate metrics Pirate metrics were created by Dave McClure, founder of 500 Startups, to talk about the life cycle of users through your product. Thinking of it as a funnel. Users finding your product is _acquisition_; users having a great first experience is _activation_; keeping users returning to your product is called _retention_; users recommending others because they love your product is _referral_; and finally, users paying for your product because they see value in it is _revenue_. Put it all together AARRR – Pirate metrics. Acquisition is that users land on your site and sign up. Activation is when someone takes the first step with your product toward having a great experience. **This path works for consumer products with a _freemium_ attribute.** If you are a B2B product with a sales team, you generate revenue before users have activation. You can swap the order of these to match your product's flow. As this works as a funnel, you can easily calculate the conversion through each step. Understanding how many people are in each phase of the funnel also lets you target those cohorts and figure out how to move them into the next one. Although Pirate Metrics is popular, some people saw the flaw that it did not talk about user satisfaction. Kerry Rodden, a Googler, created the [HEART metrics](https://library.gv.com/how-to-choose-the-right-ux-metrics-for-your-product-5f46359ab5be) for this. #### The HEART framework HEART metrics measure _happiness_, _engagement_, _adoption_, _retention_, and _task success_. Adoption is similar to activation in Pirate Metrics because you are talking about someone using the product for the first time. Retention is the same as in Pirate Metrics. Happiness is a measure of how satisfied the user is with the product. Engagement is a measure of how often users interact with the product. Task success measures how easy it is for a user to accomplish what they were meant to with the product. #### Setting direction with data Retention is a lagging indicator. It will be months before you have solid data to show that people stayed with you. That's why we also need to measure leading indicators such as activation, happiness, and engagement. Leading indicators tell us whether we're on our way to achieving those lagging indicators like retention. In the case of retention, you can qualify what keeps people retained, for example, happiness and usage of the product. One of the first things every company should do is to implement a metrics platform. Amplitude, Pendo.ai, Mixpanel, Intercom, and Google Analytics are all data platforms, and they all enable product managers to make well-informed decisions. You won't be able to set success metrics without investigating the problem. This is why we first need problem exploration. ### Problem exploration #### Understanding the problem Although data analysis is important, it can't tell the entire story. So, **it's essential that we all go talk to actual humans and get to the heart of their problems.** Giff Constable created an entire book called _Talking to Humans_. User research, observations, surveys, and customer feedback are all tools that you can harness to better explore the problem from a user standpoint. User research, in this case, is not to be mistaken for _usability testing_, which involves showing a prototype or website and directing people to complete actions. There, you are learning whether they can use and navigate the solution easily, not whether the solution actually solves the problem. This type of research is called _evaluative_. Problem-based user research is _generative research_, meaning that its purpose is to find the problem you want to solve. Going to the source of the customer's problem and understanding the context around it. Trying to identify the pain point and the root cause of the problem. **It's easy to fall into the trap of solving problems before you find their root causes. We're all prone to problem solve, even if we don't know what the problem is.** It's also easy to become attached to solution ideas. \"Nobody wants to hear their baby is ugly\". The way around this is not to get too attached. Kill the bad ideas before they take up too much time and energy from the teams and before you get hooked on them. Instead, **fall in love with the problem you are solving.** By getting into the mindset of solving problems early, you allow much more time to build the right thing, because you're not wasting time chasing after the wrong things. #### Breaking down barriers and getting creative In many companies, it's difficult, or even impossible, to talk to the customer, usually due to corporate bureaucracy. **In a consumer industry, you can usually reach out to friends of friends who use the product or have the right background. In a B2B environment, you can work with the sales or account managers to have them be your research spies – asking the questions you might need to know during their sales calls or follow-up meetings.** You have to remember that is not the customer's job to solve their own problems. It's your job to ask them the right questions. ### Solution exploration #### Experimenting to learn **Companies often confuse the _building to learn_ and _building to earn_. Experimentation is all about building to learn.** Experiments should not be designed to last for a long time, they are meant to prove whether a hypothesis is true or false, and, in software, we want to do this as quickly as possible. When we use an MVP only to get a feature out quicker, we're usually cutting corners on a great experience in the process. We sacrifice the amount we can learn from. The most important piece of the MVP is the learning, \"the minimum amount of effort to learn\". Experiments are designed to help companies learn faster. We are not creating stable, robust, and scalable products. The Product Kata is great for this, it always asks the question \"What do you need to learn next?\". Concierge, Wizard of Oz, and concept testing are three examples of solution experiments. With any experiment, it is important to think of how you will end it. Setting expectations on experiments with your customers is key to keeping them happy. Explain to them why you are testing, when and how the experiement will end, and what you plan to do next. Communication is key to a successful experimentation process. #### Concierge Concierge experiments deliver the end result to your client manually, but they do not look like the final solution at all. Your customers will understand that you're doing it manually and that it's not automated. Concierge experiments are particularly interesting for B2B companies because this is how many of these companies got started, by taking on the work for the customers and then later automating it. These experiments don't scale, given that it's labor-intensive. You should conduct these experiments with just enough users so that you can stay in regular contact with them, get plenty of feedback. #### Wizard of Oz This is a method you can use for reaching a broader audience for feedback. It looks and feels like a real, finished product. Customers don't know that, on the backend, it's all manual. This is a great technique when you are looking for feedback at scale. Companies are tempted to leave Wizard of Oz experiments up for a long time because they look real to the customers. This is not wise because it is still manual on the backend. Wizard of Oz can be combined with techniques such as A/B testing. Although, you wouldn't want to use A/B testing in two instances: if you were very unsure about your solution direction or if you did not have enough traffic on those pages to have significance. #### Concept testing It focuses more on high-touch interaction with the customer. You try to demonstrate or show concepts to the user to gauge their feedback. From landing pages and low-fidelity wireframes to higher-fidelity prototypes or videos of how the service might play out. The idea is to pitch the solution idea in the fastest, lightest way possible to convey the message. In many early-stage companies, concept testing is the way they get early sales or capital. #### When you don't need to experiment robustly The mentioned tools are used for higher amounts of uncertainty and, thus, larger risk in your solution ideas. In a case where the team knows the problem and the solution, it's time to implement it. There is no need for up-front testing. You should still be building to learn instead of rushing into a complete solution, but there are other tools you can harness, such as prototypes. Prototypes are the most popular tool for testing. They don't require any code, and there are many software products out there that can help you link screens together to make the flow feel real. **Prototypes don't make sense when you need to validate the problem.** You'd be spinning your wheels creating shiny designs that look great but don't help you to learn what you need to learn. #### Experimenting in complex industries If we take too long to get feedback, we not only waste money but also waste time. The opportunity cost of building the wrong thing is too high. #### Experimenting on internal products You should do it. If people can't figure out how to use tools, that's on you, not them. Internal tools are often neglected, but they still matter to the company. They need to be treated the same way as any other product. ### Building and optimising your solution #### Evolving the product vision After the direction is set for the product vision, it's important to make sure everyone understands the context and work that needs to be done. Story mapping and North Star documents are two ways to help teams find alignment around the vision. **A North Star document explains the product in a way that can be visualised by the entire team and company. This includes the problem it is solving, the proposed solution, the solution factors that matter for success, and the outcomes the product will result in.** North Stars are great for providing context to a wide audience. They should be evolved over time, as you learn more about your product. This is not an action plan, it does not include how the team will be building the product. That is where _story mapping_ comes in. _Story mapping_ is a technique created by the product management veteran and consultant Jeff Patton, to make sure people understood the work and to prioritise the first release. It helps teams break down their work and align around goals. \"It's purpose is to help the team communicate about their work and what needs to get done to deliver value\". This includes breaking down each desired action from the user standpoint. #### Prioritising work Prioritisation is a top issue for most product managers. There are many frameworks out there that will help you prioritise, like _benefits mapping_, _Kano models_ or Cost of Delay. In the book _The Principles of Product Development Flow_, Don Reinersten talks about the importance of the Cost of Delay. Cost of Delay is a numeric value that describes the impact of time on the outcomes you hope to achieve. It combines urgency and value so that you can measure impact and prioritise what you should be doing first. Consider the trade-offs between the amount of value you can capture with the scope of the release and the time it takes to get it out the door. It's an optimisiation problem. You want to reduce scope enough so that you can capture the maximum value in the right time. If you wait too long because you overscoped the release, you lose the money you could have been making. Worse, a competitor could swoop in and steal your market. On the flip side, you don't want to release something that is terrible and provides minimal benefit to the user in order to get it out early. You should discuss each feature or feature component in terms of urgency and value. If it is high urgency, that means that ever moment you do not ship that feature to customers, you are losing out an opportunity to hit your goal. **High value is about solving the strongest problems or desires for the customer.**. Learn more, head to [Black Swan Farming](https://blackswanfarming.com/). #### The real definition of done When teams create their Definition of Done, it's usually around finishing building features required to ship a product. It sets the wrong expectations about what a finished feature is. **We are done developing or iterating on a feature only when it has reached its goals. We need to measure the outcomes.** Teams should set the success criteria before the launch while measuring and iterating until they reach it. Being able to talk to customers, oriented to outcomes, and with the required space provided by the leadership team to figure out how to achieve those outcomes. These are the marks of a product-led company. Culture, policies, and structure are the things that really set a company apart to thrive in product management. ## The product-led organisation > The product-led organisation is characterised by a culture that understands and organises around outcomes over outputs, including a company cadence that revolves around evaluating its strategy in accordance to meeting outcomes. In product-led organisations, people are rewarded for learning and achieving goals. Management encourages product teams to get close to their customers, and product management is seen as a critical function that furthers the business. Kodak made good strides in trying to innovate, but its organisation prevented it from doing so. The company was reactive than strategic, waiting too long to respond to a threat. **When people work in silos, innovation often happens in a separated place without the proper resources to fully execute on what is being discovered.** The fate faced by Kodak can be avoided by adopting a product-led mindset. You can be making an effort to understand customers and to conduct good research, but without the organisation to sustain it, the efforts are too little, too late. You need to become a product-led organisation, both in mentality and in practice. ### Outcome-focused communication Companies stuck in the build trap are usually not patient enough to see outcomes emerge, so they instead measure progress by the number of features shipped. Leaders will say that they want to achieve results, but at the end of the day, they still measure success by features shipped. People want to feel like they are accomplishing things. Checking off the boxes of finished work feels good, but we need to remember that this is not the only measure of success. It's important to have a cadence of communciation that shows progress at every level of the organisation, tailored to each specific audience. #### Cadences and communication **Visibility in organisations is absolutely key. The more leaders can understand where teams are, the more they will step back and let the team execute.** If you keep things transparent, you will have more freedom to become autonomous. Companies tend to fall into bad habits because they have not figured out how to consistently communicate progress in the form of outcomes. When leaders do not see progress toward goals, they quickly resort to their old ways. There are a few core meetings to evaluate progress: * **Quarterly business review**: The senior leadership team should discuss progress toward the strategic intents and outcomes of a financial nature. Reviewing revenue for the quarter, churn of customers, and costs associated with the development of operations. The CPO and their VPs of product are responsible for communicating how the outcomes of product initiatives have furthered strategic intents. **This is not the place to prioritise new product initiatives or to go into detail on them. That is what the product initiative review is for.** * **Product initiative review**: This is a quarterly meeting dedicated for the product development side of the house – CPO, CTO, design leaders, VPs of Product and product managers. Here you review the progress of the options against the product initiatives and adjust our strategy accordingly. This is the place for product managers to talk about the results of preliminary experimentation. New product initiatives can be introduced in this meeting for feedback and buy-in. * **Release reviews**: These provide the opportunity for teams to show off the hard work they have done and to talk about success metrics. These should happen monthly, before features go out, to showcase what is in the pipeline to be released. You should be communicating only what we know is going to ship, not the experiments or research being conducted. Executives can join to see what is being shipped out to customers. This can also be a place to communicate the roadmaps internally so other departments and the executive team are aware. #### Roadmaps and sales teams Instead of thinking of roadmaps as a Gantt chart, you should view them as an explanation of strategy and the current stage of your product. To do this, the product roadmap should be updated constantly (_Living Roadmaps_). You should design your communication to match your audience. A great book on how to set a roadmap is the book _Product Roadmaps Relaunched_. Roadmaps consist of a few key parts: * The theme * Hypothesis * Goals and success metrics * Stage development * Any important milestones You should align your company around certain terminology to describe stages of development. We can use these four phases: * Experiment: At this stage we want to understand the problem and to determine whether it's worth solving. Teams are conducting problem exploration and solution exploration activities. No production code is being created. * Alpha: Stage to find out if the proposed solution is desirable to the customers. Production code gets built and is live for a small set of users. These users understand that they are getting early access to a feature that might change or be killed. * Beta: Stage to find out if the solution is scalable, from a technical standpoint. * Generally Available (GA): The solution is widely available to all of our clients. Sales teams can talk openly about GA products. Poorly-constructed roadmaps are the source of much tension between product and sales. Although communicating status can be scary, given the variable nature of software development, it's also necessary. **Product management enables the sales strategy.** Sales still needs something to sell. Creating working agreements and roadmaps that can be communicated to customers is key to developing a good relationship between product and sales. #### Product operations As product teams scale to more than a few teams, keeping track of progress, goals, and processes becomes a challenge. Teams need to focus on growing their product, and operations work becomes too much of a distraction. At Marketly they ended up implementing a product operations team, run by a chief of staff who reported to the CPO. This was a very small team (two people) to help streamline operations and reporting. This allowed product people to focus on what they were good at, while product operations helped them to make ifnormed decisions, by surfacing up those reports. This team was responsible for: * Collecting data on progress toward goals and outcomes across teams. * Report on goals, outcomes, roadmaps, progress, capacity, and costs. * Set up and maintain a product analytics platform to report on product engagement metrics. * Standardise product progresses that go across teams, such as strategy cadences, experimentation tracking and feedback, documentaiton on product features, collecting data, setting goals, creating and maintaining roadmaps, and sales enablement. * Organise and run critical product meetings for strategy creation, strategy deployment and releases. * Conduct any coaching or training for the product teams. The point of this team is not to dictate how the members of a team work together to build the product, but instead to create the citeria for inputs and outputs of the work. They are not dictating whether a team can talk to users. They are creating systems that help teams figure out which users to target for their experimentation. The product operations team should be made up a combination of project managers and product people. \"Success for you would be automating away your team\". This is not a team that is meant to be large. It's an efficiency engine dedicated to automating, streamlining, and optimising. ### Rewards and incentives To often Product Managers say \"It doesn't matter what the goal is. We just have to deliver this feature\". They are being forced into the build trap by company policy. Shipping product instead of learning or solving problems for customers is what gets you into the build trap. People become afraid to try anything new. The best advice is to push back. If you don't have the seniority, you can still try to change the minds of the people who can bring those messages up the chain. Talk to your bosses about what success really means. Define your metrics for when you know you will be done. Always come with data. Most sales teams are held accountable to selling, signing the contracts and bringing in the revenue. Many teams overpromise in order to make their commission numbers. Imagine being in company where the Sales team oversold so much the development team has to run two years behind. Customers wold get angry and this would lead to high churn. Sales teams would target the wrong customers in order to make numbers. These customers would leave quickly. We want to incentivise sales teams to keep selling, but adjusting the components of their salary so that their livelihood does not depend too mucho n the commision percentages can help to mitigate this risk. Trying retention numbers to their success metrics. ### Safety and learning There may not be enough safety in the organisation to fail and learn. **Product managers need a certain amount of trust from the organisation to have room to explore different options.** Teams are going to have tro try some perceivaly wild stuff. If they are not allowed to explore these weird paths, they will never push for the status quo. Remember, **it is not a success if you fail and o not learn.** Learning should be at the core of every product-led organisation. It should be what drives us. It is also better to fail in smaller ways earlier, rather than spending all the time and money failing a publickly large way. Many companies talk about how they want their people to be innovative and how they want to create crazy new products, but there has to be an understanding that it's safe to fail in order to get innovation. The irony is that experimentation is the ultimate risk-management strategy because when you experiment early, you can preent failure. Taking 10 years to fail, slowly burning through cash and never getting anyware is more problematic than allowing for smaller failures along the way. If you adopt a great product mindset and you give people the freedom to fail, what you're doing is allowing them to fail quickly, quietly, and at a lower cost because they're testing things early. That's the type of failure you want to encourage. That's the type of failure from which we can recover. Leaders who give people the room to do that see the best results and avoid the build trap. It's also the leader's job to give people boundaries within which to operate. There are many different ways to create boundaries. You can segment your user base into populations for Alpha and Beta testing, start with small representative population, learn from them and then expand. Allows you to contain the rollback if the product doesn't work. ### Budgeting At some corporations if you don't deliver what's on the roadmap you don't get as much funding next year. That means that if a team finds a way to build a product cheaper, or finds that the product shouldn't be built at all, the team will build it anyway because they will be penalised if they don't spend all their money. It's far wiser to look at funding product development like a venture capitalist (VC). **\"This is where we are. These are our next goals. We need this much money to get to those goals.\"** ### Customer centricity In addition to a culture that rewards and promotes learning, you need a culture that focuses on the customer. To put yourself into your customer's shoes ask \"what would make my customers happy and move our business forward?\" Product management is about value exchange. **Being customer-centric allows you to figure out what products and services will fulfill that value on the customer side.** Let your teams talk to and see your customers in action. **Being customer-centric means that you know the most important thing you can do to create great products is to deeply understand your customers.** This is also the core of what it means to be product-led. When companies try being customer-led, one of the biggest mistakes they make in the transition is having leadership think that it's everyone else's job to change instead of theirs. ## Escaping the build trap to become product-led > I needed to learn about humility. **I learned that my role was not that of the big idea generator but that the bad idea terminator.** > > As I moved into more senior roles, I learned that having a good strategic framework could make or break a company. People will get in the way of a good product every time. If it doesn't meet the agendas of senior stakeholders, good ideas can be squashed. To mitigate that risk, **you need to deeploy understand what motivates people and to know how you can address their personal motivations by introducing information and data that wins them over.** One of the quickest ways to kil the spirit of a great employee is to put them in an environment where they can't succeed. Even good product managers become tired of waking up and going to war every day. **The fundamental criterion for building a product is that the product solves a problem for the user.** ## Six questions to determine wheter a company is product-led * Who came up with the last feature or product idea you built? * What was the last product you decided to kill? * When was the last time you talked with your customers? * What is your goal? * What are you currently working on? * What are your product managers like? ",
    "url": "/learning-notes/books/escaping-the-build-trap/",
    "relUrl": "/books/escaping-the-build-trap/"
  },"8": {
    "doc": "Screw It, Let’s Do It: Lessons In Life",
    "title": "Screw It, Let’s Do It: Lessons In Life",
    "content": "# [Screw It, Let's Do It: Lessons In Life](https://www.goodreads.com/book/show/198863.Screw_It_Let_s_Do_It) [I have indeed read this book, but these notes below are from [keyvanakbary](https://github.com/keyvanakbary/learning-notes)] - [Just do it](#just-do-it) - [Have fun](#have-fun) - [Be bold](#be-bold) - [Challenge yourself](#challenge-yourself) - [Stand on your own feet](#stand-on-your-own-feet) - [Live the moment](#live-the-moment) - [Value family and friends](#value-family-and-friends) - [Have respect](#have-respect) - [Do some good](#do-some-good) ## Just do it - Believe It Can Be Done - Have Goals - Live Life to Full - Never Give Up - Prepare Well - Have Faith in Yourself - Help Each Other > Whatever your goal is you will never succeed unless you let go of your fears and fly. ## Have fun - Have Fun, Work Hard and Money Will Come - Don't Waste Time - Grab Your Chances - Have a Positive Outlook On Life - When it's Not Fun, Move On > Sometimes, you are just glad to have a job - any job. So you grab the job in the factory or the store or the call center. You might hate it, but you try to make the best of things. But is that fun? I would say do you really have to stay stuck in a rut? Is that job you hate really your only option? Whoever you are, you have other choices. Look around. See what else you can do. ## Be bold - Calculate the Risks and Take Them - Believe in Yourself - Chase Your Dreams and Goals - Have No Regrets (Never look back. You can't change the past. Learn from it) - Be Bold (don't be foolish and *don't gamble on things you cannot control*) - Keep Your Word ## Challenge yourself - Aim high - Try New Things - Always Try - Challenge Yourself ## Stand on your own feet - Rely on Yourself - Chase your Dreams but Live in the Real World - Work Together > If you want milk, don't sit on a stool in the middle of the field in the hope that the cow will back up you ## Live the moment - Love Life and Live It To The full - Enjoy the Moment - Reflect on your Life - Make Every Second Count - Don't Have Regrets > Hard-won things are more valuable than those that come too easily > Regrets weigh you down. They hold you back in the past when you should move on. > Always living in the future can slow us down as much as always looking behind. Many people are always looking ahead and they never seem content. They look for quick fixes, like winning the lottery ## Value family and friends - Put the Family and the Team First (We all need a strong support network) - Be Loyal - Face Problems Head On (best to bring things out into the open) - Money is for Making Things Happen - Pick the Right People and Reward Talent (Even if someone is hired to do one thing, if they have good ideas, or can handle something else, just let them do it) ## Have respect Respect is about how to treat everyone, not just those you want to impress. - Be Polite and Respectful - Do the Right Thing - Keep Your Good Name (You could be rich, but if people didn't trust you, it counted for nothing. *Your reputation is everything*) - Be Fair in All Your Dealings ## Do some good - Change the World, Even if in a Small Way - Make a Difference and Help Others - Do No Harm - Always Think What You Can Do To Help > People in business and the very wealthy are in a unique position. They can connect with everyone, whether high or low, in any country, though a network of good will. ",
    "url": "/learning-notes/books/screw-it-lets-do-it/",
    "relUrl": "/books/screw-it-lets-do-it/"
  },"9": {
    "doc": "Test-Driven Development: By Example",
    "title": "Test-Driven Development: By Example",
    "content": "# [Test-Driven Development: By Example](https://www.goodreads.com/book/show/387190.Test_Driven_Development) [I have indeed read this book, but these notes below are from [keyvanakbary](https://github.com/keyvanakbary/learning-notes)] - [TDD videos](#tdd-videos) - [Preface](#preface) - [Money session](#money-session) - [Xunit session](#xunit-session) - [Test-Driven Development Patterns](#test-driven-development-patterns) - [Red bar patterns](#red-bar-patterns) - [Red bar patterns](#red-bar-patterns-1) - [Green bar patterns](#green-bar-patterns) - [Design patterns](#design-patterns) - [Refactoring](#refactoring) - [Mastering TDD](#mastering-tdd) ## TDD videos I skipped the TDD sessions in the book, _Money Pattern_ with Java and _implementing xUnit_ with Python, so the summary can focus on the learnings. Some interesting videos on TDD - [TDD intro by Kent Beck](https://www.youtube.com/watch?v=VVSSga1Olt8) - [Making making CoffeeScript by Kent Beck](https://www.youtube.com/watch?v=nIonZ6-4nuU) - [The Three Laws of TDD by Uncle Bob](https://www.youtube.com/watch?v=qkblc5WRn-U) ## Preface Two simple rules: * Write new code only when you first have a failing automated test. * Eliminate duplication The technical implications of these two simple rules: * Design organically * Write your own tests * Provide rapid response to small changes * Design highly cohesive, loosely coupled components, just to make testing easy. Order of programming tasks: 1. **Red**: Write a little test that doesn't work, perhaps doesn't even compiler 2. **Green**: Make the test work quickly, committing whatever sins necessary in the process 3. **Refactor**: Eliminate all the duplication created in just getting the test to work Why would a programmer work in tiny little steps when their mind is capable of great soaring swoops of design? Courage. ### Courage Test-driven development is a way of managing fear during programming, this-is-a-hard-problem-and-I-can't-see-the-end-from-the-beginning. TDD isn't an absolute like Extreme Programming. TDD is an awareness of the gap between decision and feedback during programming, and techniques to control that gap. There are certainly programming task that can't be driven solely by tests, like security software and concurrency. > My goal is to write clean code that works. Imagining a programming world in which all code was this clear and direct, where there were no complicated solutions, only apparently complicated problems begging for careful thought. TDD is a practice that can help you lead yourself exactly that careful thought. ### Story time TDD is a set of techniques any programmer can follow, that encourage simple designs and test suites that inspire confidence. *If you are a genius, you don't need these rules.* If you are dolt, the rules won't help. Two rules: * Write a failing automated test before you write any code. * Remove duplication ## Money session The rhythm of TDD: 1. Quickly add a test 2. Run all the tests and see the new one fail 3. Make a little change 4. Run all tests and see them all succeed 5. Refactor to remove duplication #### Create a test We don't start with objects, we start with tests. When we write a test, we imagine the perfect interface for our operation. We are telling ourselves a store about how the operation will look from the outside. Our story wont' always come true, but better to start from the best possible API and work backwards than to make things complicated, ugly and \"realistic\" from the get go. You'll might end up with multiple compile errors from a single test. It's common to start from the following code when non of the code exists yet. ```java public void testMultiplication() { Dollar five = new Dollar(5); five.times(2); assertEquals(10, five.amount); } ``` We might need a constructor, but it doesn't have to do anything. We might need a stub implementation for methods. **We'll do the least work possible just to get the test to compile.** Once we solve compilation errors, we run the test and we watch it fail. Failure is progress. We've transformed a much broader problem to \"make this test work and make the rest of the tests work\", which is in fact a much simpler and much smaller scope for fear. #### Make it pass The goal right now is not to get the perfect answer, the goal is to pass the test. #### Make it right Dependency is the key problem in software development at all scales. If dependency is the problem, duplication is the symptom. Objects are excellent for abstracting away the duplication of logic. Eliminating duplication in programs eliminates dependency. By eliminating duplication before we go on the next test, we maximize our chance of being able to get the next test running with one and only one change. ### Degenerate objects The general TDD cycle 1. **Write a test.** You are writing a story. Invent the interface you wish you had. Include all the elements int he story that you imagine will be necessary to calculate the right answers. 2. **Make it run.** Quickly getting that bar green dominates everything else. 3. **Make it right.** Remove the duplication you have introduced to get to quick green. The goal is clean code that works. Divide an conquer, solve the \"that works\" part, then solve the \"clean code\". Strategies for quickly getting to green: - **Fake it**, return a constant and gradually replace constants with variables until you have the real code. - **Obvious implementation**, type in the real implementation. When you know what to type, go for the obvious implementation. As soon as you get the unexpected red bar, back up and shift to fake implementation and refactor to the right code. Once confidence is back, go back to obvious implementation. ### Equality for all There is a third strategy, **triangulation**. We briefly ignore the duplication between test and model code. When the second example demands a more general solution, then and only then do we generalize. Use triangulation when you are completely unsure of how to refactor. > Why would I need to write another test to give me permission to write what I probably could have written the first time? Triangulation gives you a chance to think about the problem from slightly different direction. By varying the axes of variability to get a clearer answer. ### Privacy From time to time, our reasoning will fail us and a defeat will slip through. When that happens, we learn our lesson about the test we should have written and move on. ### Equality for all, redux When you don't have enough tests, you are bound to come across refactorings that aren't supported by tests. Write the tests you wish had. If you don't, you'll eventually break something while refactoring. ### Makin' objects When you have two subclasses that aren't doing enough work to justify their existence and you want to eliminate them, you can't do it with one big step. We could be a step closer eliminating the subclasses if there were fewer references to the subclasses directly. We could use Factory Method in the parent class to remove references to the subclasses in the tests. By decoupling the tests from the existence of the subclasses, we have given ourselves freedom to change inheritance without affecting any model code. ### Time we're livin' in Working in tiny steps is a recommendation, if it feels restrictive take bigger steps. If you feel unsure, take smaller steps. TDD is a steering process. ### Interesting times We end up having clean code and tests that give us confidence that the clean code works. Rather than apply minutes of suspect reasoning, we can just ask the computer by making the change and running tests. Without the tests you have no choice, you have to reason. With the tests you can decide whether an experiment would answer the question faster. We'd prefer not to write a test when we have a red bar. We can't change model code without a test. The conservative course is back our the change that caused the red bar so we're back to green. Then we change the test, the implementation and re-try the original change. ### The root of all evil When the object you have doesn't behave like you want, make another object with the same external protocol (an Imposter) but different implementation. TDD can't guarantee that you will have flashes of insight at the right moment. However, confidence-giving tests and carefully factored code give you preparation for insight, and preparation for applying that insight when it comes. ### Change No need for writing tests for `equals()` and `hashCode()` as we are writing those in the context of a refactoring. ### Abstraction, finally For TDD to make economic sense, either you will have to be able to write twice as many lines per day as before, or write half as many lines for the same functionality. You'll have to measure and see effect TDD has on your own practice. Be sure to factor debugging, integrating, and explaining time into your metrics, though. TDD can be used as a way to strive for perfection, but that isn't its most effective use. If you have a big system, the parts that you touch all the time should be absolutely rock solid, so you can make daily changes confidently. ### Retrospective > I like running a code critic. Automated critics don't forget, if you don't delete an obsolete implementation, you don't have to stress. The critic will point it out. The number of changes per refactoring should follow a \"fat tail\". #### Test quality Coverage is certainly not a sufficient measure of test quality, but it is a starting place. Another way of evaluating test quality is defect insertion. The idea is simple, change the meaning of a line of code and a test should break. #### One last review The three items that come up time and again as surprises when teaching TDD are - The three approaches to making a test work cleanly: fake it, triangulate and just typing the right solution to begin with. - Removing duplication between test and code as a way to drive the design. - The ability to control the gap between tests to increase traction when the road gets slippery and cruise faster when conditions are clearer. ## Xunit session ### Invoke test method Lots of refactoring has this feel, separating two parts so you can work on them separately. If they go back together when you are finished, fine, if not, you can leave them separate. Another general pattern of refactoring, take code that works in one instance and generalize it to work in many by replacing constants with variables. Starting from scratch is about the worst possible case for TDD, because we are trying to get over the bootstrap step. Once you mastered TDD, you will be able to work in much bigger leaps of functionality. ### Set the table Patterns inside tests: 1. Arrange, create some objects. 2. Act, stimulate them. 3. Assert, check the results. Two common constraints on tests come into conflict: - *Performance*, we would like to run as quickly as possible and that might mean to share objects between tests. - *Isolation*, we would like the success or failure of one test to be irrelevant to other tests. One test can be simple if and only if another test is in place and running correctly. Simplicity of test writing is more important than performance. ### Cleaning up after Doing a refactoring based on a couple of early uses, then having to undo it soon after is fairly common. ### Retrospective The details of the implementation are not nearly as important as the test cases. ## Test-Driven Development Patterns ### Test _n_ No programmers release even the tiniest change without testing, except the very confident and the very sloppy. Be careful with the positive feedback of not listening to stress and avoiding tests: The more stress you feel, the less testing you'll do. The less testing you do, the more errors you will make. The more errors you make, the more stress you feel. With automated tests, when you start to feel stress, just run the tests. With automated tests you have a chance to choose your level of fear. ### Isolated test **Make the tests so fast to run that you can run them yourself, and run them often. That way you can catch errors before anyone else sees them.** Tests should be able to ignore each other completely. If you have one test broken, you want to have one problem. If you have two tests broken, you want to have two problems. Isolating tests encourages you to compose solutions out of many highly cohesive, loosely coupled objects. > I never knew exactly how to regularly achieve high cohesion and loose coupling until I started writing isolated tests. ### Test list The first part of our strategy for dealing with programming stress is to never take a step forward unless we know where our foot is going to land. What is it we intend to accomplish? One strategy for keeping track of what we're trying to accomplish is to hold it all in our heads. > I tried this for several years, and found I got into a positive feedback loop. The more experience I accumulated, the more things I knew that might need to be done. The more things I knew might need to be done, the less attention I had for what I was doing. The less attention I had for what I was doing, the less I accomplished. The less I accomplished, the more things I knew that needed to be done. Another strategy is to try to plan everything in advance and implement tests _en masse_. Probably the best option is to always test first. Then we can get into a virtuous cycle: When we test first, we reduce the stress, which makes us more likely to test. The immediate payoff for testing, a design and scope control tool, suggests that we will be able to start doing it, and keep doing it even under moderate stress. ### Assert first - Where should you start building a system? With stories you want to be able to tell about the finished system. - Where should you start writing a bit of functionality? With the tests you want to pass with the finished code. - Where should you start writing a test? With the asserts that will pass when it is done. ### Test data Use data that makes the tests easy to read and follow. Don't have a list of 10 items as the input data if a list of 3 items will lead you the same design and implementation decisions. The alternative to Test Data is Realistic Data, where you use data from the real world. Realistic Data is useful when: - You are testing real-time systems using traces of external events - You are matching the output of the current system with output of the previous system. - You are refactoring a simulation and expect precisely the same answers when you are finished. ### Evident data The intent of data should be represented including expected and actual results in the test itself, trying to make their relationship apparent. Remember, you are writing the tests for the reader, not just the computer. ## Red bar patterns If you don't find any test on the list that represents one step, add some new tests that would represent progress towards the items there. ### Starter test The first question you have to ask with a new operation is \"Where does it belong?\" Beginning with a realistic test will leave you too long without feedback. You can shorten the loop by choosing inputs and outputs that are trivially easy to discover. ### Explanation test Ask for and give explanations in terms of tests. ### Another test When a technical discussion is straying off topic with a tangential idea, add a test to the list and go back to the topic. New ideas are greeted with respect, but not allowed to divert the attention. You write them down on the list and get back to what you were working on. ### Regression test When a defect is reported write the smallest possible test that fails, and once it runs, the defect will be repaired. ### Break When you feel tired or stuck take a break. **Shower methodology**: if you know what to type, type. If you don't know what to type, take a shower. TDD is a refinement of that strategy, if you don't know what to type, fake it. If the \"right\" design still isn't clear, triangulate. If you still don't know hat to type, then you can take that shower. ## Red bar patterns - At the scale of a week, weekend commitments help get your conscious, energy-sucking thoughts off work. - At the scale of a year, mandatory vacation policies help you refresh yourself completely. ### Do over When you are feeling lost throw away the code and start over. If you pair program, switching partners is a good way to motivate productive do overs. ### Child test How do you get a test case running that turns out to be too big? Write a smaller test case that represents the broken part of the bigger test case. ### Mock object In order to test an object that relies on an expensive or complicated resource, you create a fake version of the resource that answers constants. Mock objects add a risk to the project, what if the mock doesn't behave like the real object? You can reduce this strategy by having a set of tests for the mock that can also be applied to the real object when it becomes available. ### Self Shunt How do you test one object communicates correctly with another? Have the object under test communicate with the test case instead of the object it expects. We don't need Spy objects. ```python def testNotification(self): self.count = 0 result = TestResult() result.addListener(self) WasRun(\"testMethod\").run(result) assert 1 == self.count def startTest(self): self.count = self.count + 1 ``` Self Shunt tend to read better than tests written without. ### Log string If you want to test that a sequence of messages are called correctly, keep a log in a string, and append to the string when a message is called. Log strings are particularly useful when implementing Observer and you expect notifications to come at certain order. It works well with Self Shunt. ### Crash test dummy If you want to test the flow for an error code, invoke a special object that throws an exception instead of doing real work. ### Broken test How do you leave a programming session when you are programming alone? Leave the last test broken. When you come back to the code, you have an obvious, concrete bookmark to help you remember. ### Clean check-in How do you leave a programming session when you are programming in a team? Leave all the tests running. When you are responsible to your teammates, the picture changes. You don't know in detail what has happened to the code since you saw it last. You need to start from a place of confidence and certainty. ## Green bar patterns ### Fake it ('til you make it) The first implementation once you have a broken test should returning a constant. Once you have the test running, gradually transform the constant into an expression using variables. Having something running is better than not having something running. Effects that make _fake it_ powerful: - **Psychological**, having a green bar feels completely different than having a red bar. - **Scope control**, Starting with one concrete example and generalizing from there prevents you from prematurely confusing yourself with extraneous concerns. ### Triangulate How do you most conservatively drive abstraction with tests? Only abstract when you have two or more examples. Once we have the two assertions and we have abstracted the correct implementation, we can delete one of the assertions on the grounds that it's completely redundant with the other. > I only use triangulation when I'm really, really unsure about the correct abstraction for the calculation ### Obvious abstraction Sometimes you know how to implement an operation. Go ahead. Beware that solving \"clean code\" at the same time you solve \"that works\" can be too much to do at once. ### One to many If you need to implement an operation that works with collection of objects, implement it first without collections and then make it work with them. ### Fixture When you need objects needed by several tests, convert local variables in the tests into instance variables. Sometimes one fixture serves to test several classes. ### External fixtures Release external resources in the `tearDown`. The goal of each test is to leave the world in exactly the same state as before it ran. ### Test method All the tests sharing a single fixture will be methods in the same class. Tests requiring a different fixture will be in a different class. The name of the method should suggest to a future clueless reader why this test was written. > When I write tests, I first create a short outline of the tests I want to write like: > // Adding to tuple spaces > //// Taking a non-existing tuple > // Taking from tuple to spaces ## Design patterns The design patterns book seems to have a subtle bias towards design as a phase. It certainly makes no nod towards refactorign as a design activity. ### Command When we need an invocation to be just a little more concrete and manipulable than a message, objects give us the answer. Make an object representing an invocation. Seed it with all the parameters the computation will need. When we're ready to invoke it, use generic protocol like `run()`. Lambda would work pretty well in this case. ### Value object Objects are better than primitives because they are a great way to organize logic for later understanding and growth. However, there is one little problem. **Aliasing problem**: If two objects share a reference to a third, if one object changes the referred object, the other object better not rely on the state of the shared object. One solution is to never give out the objects that you rely on, but instead to always make copies. Another solution is Observer, where you explicit register with objects on which you rely and expect to be notified when they change. Another solution is to treat the object as less than an object and eliminate the \"that change over time\". Immutability and value is one of the core concepts of value objects. Every mutating operation just returns a new object. It makes reading and debugging so much easier. All value objects have to implement equality. ### Null object When you have a special case using objects, create an object representing the special case. Give it the same protocol as regular objects. ```java SecurityManager security = SecurityManager.getSecurityManager(); if (security != null) { security.checkWrite(path); } ``` to ```java class LaxSecurity { public void checkWrite(String path) { } } class SecurityManager { public static SecurityManager getSecurityManager() { return security != null ? security : new LaxSecurity(); } } ``` Now we don't have to worry about someone forgetting to check for `null`. ```java SecurityManager security = SecurityManager.getSecurityManager(); security.checkWrite(path); ``` ### Template method A way of representing invariant sequence of a computation while providing for future refinement is to write a method that is implemented entirely in terms of other methods. A superclass can contain a method written entirely in terms of other methods, and subclasses can implement those methods in different ways. Template methods are best found through experience instead of designed that way from the beginning. ### Pluggable object The simplest way to express variation is with explicit conditionals ```java if (circle) { } else { } ``` Such explicit decision making beings to spread. ```java class SelectionTool { Figure selected; public void mouseDown() { selected = findFigure(); if (selected != null) select(selected); } public void mouseMove() { if (selected != null) move(selected); else moveSelectionRectangle(); } public void mouseUp() { if (selected == null) selectAll(); } } ``` The answer is to create Pluggable Object, a `SelectionMode` with two implementations `SingleSelection` and `MultipleSelection`. ```java class SelectionTool { Figure selected; SelectionMode mode; public void mouseDown() { selected = findFigure(); if (selected != null) mode = SingleSelection(selected); else mode = MultipleSelection(); } public void mouseMove() { mode.mouseMove(); } public void mouseUp() { mode.mouseUp(); } } ``` ### Pluggable selector If you want to invoke different behaviour for different instances, store the name of a method, and dynamically invoke it. When you have ten subclasses of a class, each implementing only one method, subclassing is a heavyweight mechanism. One alternative is to have a single class with a switch statement. The Pluggable Selector solution is to dynamically invoke the method using reflection ```java void print() { Method runMethod = getClass().getMethod(printMessage, null); runMethod.invoke(this, new Class[0]); } ``` ### Factory method When you want to create an object wanting flexibility creating the new object, create the object in a method instead of using a constructor. Constructor slack expressiveness and flexibility. By introducing a level of indirection, through a method, we gained the flexibility of returning an instance of a different class without changing the test. The downside of Factory Method is precisely its indirection. You'll have to remember that the method is really creating an object. Use it when you need flexibility. Otherwise, constructors work just fine. ### Imposter When you want to introduce a new variation into a computation, introduce a new object with the same protocol as an existing object but with different implementation. Two examples of Imposters that come up frequently during refactoring: - **Null Object**, treat the absence of data the same as the presence of data. - **Composite**, treat a collection of objects the same as a single objects. Finding Imposters during refactoring is driven by eliminating duplication. ### Collecting parameter If you want to collect results spread over several objects, you add a parameter to the operation in which the results will be collected. ### Singleton Avoid providing global variables through singletons, think about the design instead. ## Refactoring Usually, refactoring cannot change the semantics of a program under any circumstances. In TDD, the circumstances we care about are the tests that are already passing. We can replace constants with variables in TDD and call this operation a refactoring because it doesn't change the set of tests to pass. > _Leap of faith_ refactoring is exactly what we're trying to avoid with our strategy of small steps and concrete feedback. ## Mastering TDD ### What don't you have to test? > Write tests until fear is transformed into boredom Unless you have a reason to distrust it, don't test code from others. ### How do you know if you have good tests? The tests are a canary in a coal mine revealing by their distress the presence of evil vapors. Signals that your design is in trouble. - **Long setup code**. If you have to spend a hundred lines creating the objects for one simple assertion, something is wrong. Your objects are too big and need to be split. - **Setup duplication**. If you can't easily find a common place for common setup code, there are too many objects too tightly intertwingled. - **Long running tests**. TDD tests that run a long time won't be run often, and often haven't been run for a while, and probably don't work. Worse than this, this might suggest that testing the bits and pieces of the application is hard, and this is a design problem. - **Fragile tests**. Tests that break unexpectedly suggest that one part of the application is surprisingly affecting another part. ### How does TDD lead to frameworks Paradox: By not considering the future of your code you make your code much more likely to be able to adapt in the future. ### When should you delete tests? Never delete a test if it reduces your confidence in the behavior of the system. If you have two tests that exercise the same path through the code, but they speak to different scenarios for readers, leave them alone. If you have two tests that are redundant with respect to confidence and communication, delete the least useful of the two. ### How does the programming language and environment influence TDD? In programming languages and environments where TDD cycles (test/compile/run/refactor) are harder to come by, you will be likely to be tempted to take larger steps. ### Can you drive development with application-level tests (ATDD)? The problem with driving development with small scale test (\"unit tests\") is that you run the risk of implementing what you think a user wants. If we wrote the tests at the level of the application, then the users could write tests themselves for what exactly they wanted the system to do next. There is a technical problem, how you can write and run a test for a feature that doesn't exist yet? There is a social problem with ATDD, writing tests is a new responsibility for users and organizations resist this kind of shift of responsibility. TDD is a technique that is entirely under your control. Mixing up the rhythm of red/green/refactor, the technical issues of application fixturing, and the organizational change issues surrounding user-written tests is unlikely to be successful. Another aspect of ATDD is the length of the cycle between test and feedback. ### How do you switch to TDD mid-stream? The biggest problem is that code that isn't written with tests in mind typically isn't very testable. \"Fix it\", you say. Yes, well, but refactoring (without automated toos) is likely to result in errors, errors that you won't catch because you don't have the tests. What you don't do is go write tests for the whole thing and refactor the whole thing, that would take months. Parts of the system that don't demand change at the moment we will leave them alone. We have to break the deadlock between tests and refactoring. We can get feedback working very carefully and with a partner. System level tests give us some confidence. ### Who is TDD intended for? If you are happy slamming some code together that more or less works and never looking a the same result again, TDD is not for you. TDD rests on a charmingly naive geekoid assumption that if you write better code, you'll be more successful What's naive is assuming that code is all there is to success. Good engineering is maybe 20% of a project's success. Bad engineering will certainly sink projects, but modest engineering can enable project success as long as the other 80% liens up for it. Those whose souls are healed by the balm of elegance can find in TDD a way to do well by doing good. TDD is also good for geeks who form emotional attachments to code. > My goal is to feel better about a project after a year than I did in the starry-eyed beginning, and TDD helps me achieve this. ### Why does TDD work? Let's assume for the moment that TDD helps teams productively build loosely coupled, highly cohesive systems with low level defect rates and low cost of maintenance profiles. The sooner you find and fix a defect, the cheaper it is. Programmers really do relax, teams really do develop trust, and customers really do learn to look forward to new releases. It's effect is the way it shortens the feedback loop on design decisions. > Adopt programming practices that \"attract\" correct code as a limit function, not as an absolute value. ### What's with the name? One kind of the ironies of TDD is that it isn't a testing technique, it's an analysis technique, a design technique, really a technique for all the activities of development. ### Darach's challenge - You can't test GUIs automaticaly - You can't unit test distributed objects automaticaly - You can't test-first develop your database schema - There is no need to test third party code - You can't test first develop a language compiler / interpreter. ",
    "url": "/learning-notes/books/test-driven-development/",
    "relUrl": "/books/test-driven-development/"
  },"10": {
    "doc": "The Elements of Style",
    "title": "The Elements of Style",
    "content": "# [The Elements of Style](https://www.goodreads.com/book/show/33514.The_Elements_of_Style) [I have indeed read this book, but these notes below are from [keyvanakbary](https://github.com/keyvanakbary/learning-notes)] - [Elementary rules of usage](#elementary-rules-of-usage) - [Elementary principles of composition](#elementary-principles-of-composition) - [A few matters of form](#a-few-matters-of-form) - [Words and expressions commonly misused](#words-and-expressions-commonly-misused) ## Elementary rules of usage 1. ### Form the possessive singular of nouns with 's. > Charlie's friend > Burn's poems Exceptions are possesives of ancient names in _-es_ and _-is_. > Achilles' heel > Moses' laws Commonly replaced by > The heel of Achilles > The laws of Moses 2. ### In a series of three or more terms with a single conjunction, use a comma after each term except the last. > red, white, and blue > honest, energic, but headstrong In names of businesses firms the last comma is ommited > Brown, Shipley and Company **_etc.,_** even if is a single word it always comes preceded by a comma. 3. ### Enclose parenthesic expressions between commas. > The best way to see a country, unless are pressed for time, is to travel on foot. If the interruption to the flow of the sentence is but slight, the writer may safely omit one or the other comma. > Marjorie's husband, Colonel Nelson paid us a visit yesterday, or > My brother **you will be pleased to hear,** is now in perfect health, 4. ### Place a comma before _and_ or _but_ introducing an independent clause. > The early records of the city have disappeared, and the story of its first years can no longer be reconstructed. > The situation is perilous, but there is still one chance of escape. 5. ### Do not join independent clauses by a comma. The proper mark of punctuation is a semicolon > Stevenson's romances are entertaining; they are full of exciting adventures. > It is nearly half past five; we cannot reach town before dark. It is also correct ro replace semicolons with periods. If a conjuntion is inserted the proper punctuation is a comma. > Stevenson's romances are entertaining, for they are full of exciting adventures. 6. ### Do not break sentences in two. Or basically, don't use periods as commas. 7. ### A participial phrase at the beginning of a sentence must refer to the grammatical subject. > **Walking slowly down the road**, **he saw** a woman accompanied by two children. 8. ### Divide words at line-ends, in accordance with their formation and pronunciation. A. Devide the word according to its formation > know-ledge, de-scribe, atmo-sphere B. Devide on the vowels > edi-ble, propo-sition, ordi-nary C. Devide between double letters > apen-nines, Cincin-nati, refer-ring; but tell-ing ## Elementary principles of composition 1. ### Make the paragraph the unit of composition: one paragraph to each topic. 2. ### As a rule, begin each paragraph with a topic sentence; end it in conformity with the beginning. Ending with a digression, or with an unimportant detail, is particularly to be avoided. 3. ### Use the active voice. The active voice is usually more direct and vigorous than the passive. > **I shall always remember my first visit to Boston.** Is much better than > My first visit to Boston will always be remembered by me. 4. ### Put statements in positive form. Make definite assertions. Avoid tame, colorless, hesitating, non-committal language. > He was not very often on time. > **He usually came late.** > He did not think that studying Latin was much use. > **He thought the study of Latin useless.** It is better to express a negative in positive form. > not honest, **dishonest** > not important, **trifling** > did not remember, **forgot** 5. ### Omit needless words. > the question as to whether, **whether** > there is no doubt but that, **no doubt** > used for fuel purposes, **used for fuel** > he is a man who, **he** 6. ### Avoid a succession of loose sentences. Loose sentences of a particular type, those consisting of two co-ordinate clauses, the second introduced by a conjunction or relative. Although single sentences of this type may be unexceptionable (see under Rule 4), a series soon becomes monotonous and tedious. 7. ### Express co-ordinate ideas in similar form. > The French, the Italians, Spanish, and Portuguese – Bad > **The** French, **the** Italians, **the** Spanish, and **the** Portuguese – Good > In spring, summer, or in winter – Bad > **In** spring, summer, or winter – Good 8. ### Keep related words together. > **Wordsworth**, in the fifth book of The Excursion, **gives a minute description of this church**. – Bad > In the fifth book of The Excursion, **Wordsworth gives a minute description of this church**. – Good > **Cast iron**, when treated in a Bessemer converter, is **changed into steel**. – Bad > By treatment in a Bessemer converter, **cast iron** is **changed into steel**. – Good 9. ### In summaries, keep to one tense. In summarizing the action of a drama, the writer should always use the present tense. In summarizing a poem, story, or novel, he should preferably use the present, though he may use the past if he prefers. 10. ### Place the emphatic words of a sentence at the end. The proper place for the word, or group of words, which the writer desires to make most prominent is usually the end of the sentence. > Humanity **has hardly advanced in fortitude** since that time, though it has advanced in many other ways. – Bad > Humanity, since that time, has advanced in many other ways, but it **has hardly advanced in fortitude.** – Good ## A few matters of form - **Headings**. Leave a blank line, after the title or heading of the manuscript. On succeding pages, begin on the first line. - **Numerals**. Don't spell them, write them in figures or Roman notation. - **Parentheses**. A sentence containing an expression in parenthesis is punctuated, outside of the marks of parenthesis, exactly as if the expression in parenthesis were absent. - **Quotations**. - Formal quotations as documentary evidence with semicolon an quotation marks > The provision of the Constitution is: \"No tax or duty shall be laid on articles exported from any state.\" - Quotations grammatically in apposition or the direct objects of verbs are preceded by a comma with quotation marks > Aristotle says, \"Art is an imitation of nature.\" - Quotations of an entire line, or more, of verse, are begun on a fresh line and centred, but not enclosed in quotation marks. - Proverbial expressions and familiar phrases of literary origin require no quotation marks. - **References**. Give the references in parenthesis or in footnotes, not in the body of the sentence. Omit the words act, scene, line, book, volume, page, except when referring by only one of them. > 2 Samuel i:17-27 > Othello II.iii 264-267, III.iii. 155-161 - **Titles**. Italics with capitalized initials. > The _Iliad_; the _Odyssey_; _As You Like It_; _To a Skylark_; The Newcomes. ## Words and expressions commonly misused - **_All right_**. _Agreed_ or _go ahead_. In other cases better to be avoided. - **_As good or better_**. > My opinion is **as good or better** than his. – Bad > My opinion is **as good as** his, **or better** – Good - **_To whether_**. _Whether_ is sufficient. - **_Bid_**. Takes infinitive without _to_. The past tense is _bade_. - **_Case_**. The word is usually unnecessary. - **_Certainly_**. Bad in speech is even worse in writing. - **_Character_**. Ofter simply redundant. - **_Claim_**. Not to be used as a subsitute for _declare_, _maintain_, or _charge_. - **_Compare_**. _Compare to_ point out resemblances between different objects. _Compare with_ to point out differences in resembling objects. - **_Clever_**. Greatly overused, best to restrict it to small matters. - **_Consider_**. Not followed by _as_ when it means \"believe to be\" - **_Dependable_**. Could be substituted by _reliable_, _trustworthy_. - **_Due to_**. Incorrectly used for _through_, _because of_ or _owing to_. - **_Effect_**. Not to be confused with _affect_ (to influence). Often can be replaced by something else on writing about fashions, music, painting and other arts. - **_Etc._**. Not to be used of persons. It should not left the reader with doubt of the continouty of the serie. - **_Fact_**. Used when verified, not of matters of judment. - **_Factor_**. Usually can be replaced by something more direct and idiomatic. - **_Feature_**. It usually adds nothing to the sentence it occurs. - **_Fix_**. In writing restrict it to its senses, _fasten_, _make firm or immovable_, etc. - **_He is a man who_**. Redundant. - **_However_**. In the meaning of _nevertheless_, not to come first in its sentence or clause. - **_Kind of_**. Not to be used as a replacement for _rather_. Prefer to use _something like_. Same for _sort of_. - **_Less_**. Not to be misused for _fewer_. _Less_ refers to quantity, _fewer_ to number. - **_Line, along these lines_**. Has been overworked. Better to be discarded entirely. - **_Literal, literally_**. Oftern incorrectly used in support of exaggeration or violent metaphor. - **_Lose out_**. Just use _lose_. - **_Most_**. Not to be used for _almost_. - **_Nature_**. Often redundant. - **_Near by_**. _Near_, or _near at hand_ is better. - **_Oftentimes, oftimes_**. Not used, just use _often_. - **_One hundred and one_**. Don't forget the _and_. - **_One of the most_**. Avoid begining paragraphs with it. - **_People_**. _The people_ is a political term, not to be confused with _the public_. Not to be used with words of number. - **_Phase_**. Means a stage of transition. - **_Possess_**. Not to be used as a substitute of _have_ or _own_. - **_Respective, respectively_**. May be ommited. - **_So_**. Avoid using it as an intensifier. - **_State_**. Restrict it to the sense of _express fully or clearly_. - **_Student body_**. Awkard expression. Use _students_. - **_System_**. Frequently used without need. - **_Thanking you in advance_**. Simply write \"Thanking you\". - **_They_**. The intention being either to avoid the awkward \"he or she,\" or to avoid committing oneself to either. Just use \"he\". - **_Very_**. Try to avoid it. - **_Viewpoint_**. Better to use _point of view_. Do not misuse it for _view_ or _opinion_. - **_While_**. Avoid the indiscriminate use of this word for _and_, _but_, and _although_. - **_Whom_**. Often incorrectly used for who before _he said_ or similar expressions. - **_Worth while_**. Try to avoid it. Can be applied for actions. - **_Would_**. A conditional statement in the first person requires _should_, not _would_. > I should not have succeeded without his help. The equivalent of _shall_ in indirect quotation after a verb in the past tense is _should_, not _would_. > He predicted that before long we should have a great surprise. To express habitual or repeated action, the past tense, without would, is usually sufficient, and from its brevity, more emphatic. > Once a year he would visit the old mansion. – Bad > Once a year he visited the old mansion. – Good ",
    "url": "/learning-notes/books/the-elements-of-style/",
    "relUrl": "/books/the-elements-of-style/"
  },"11": {
    "doc": "The Lean Startup",
    "title": "The Lean Startup",
    "content": "# [The Lean Startup](https://www.goodreads.com/book/show/10127019-the-lean-startup) [I have indeed read this book, but these notes below are from [keyvanakbary](https://github.com/keyvanakbary/learning-notes)] - [Introduction](#introduction) - [Lean Startup method](#lean-startup-method) - [Define](#define) - [Learn](#learn) - [Experiment](#experiment) - [Leap](#leap) - [Test](#test) - [Measure](#measure) - [Pivot (or persevere)](#pivot-or-persevere) - [Accelerate](#accelerate) - [Growth](#growth) ## Introduction > Hard work and perseverance don’t lead to success. It’s the boring stuff that matters the most Startup success can be engineered by following the right process, which means it can be learned, which means it can be taught. We do everything wrong: instead of spending years perfecting our technology, we build a minimum viable product, an early product that is terrible, full of bugs and crash-your-computer-yes-really stability problems. Then we ship it to customers way before it’s ready. And we charge money for it. > I kept having the experience of working incredibly hard on products that ultimately failed in the marketplace. At first, largely because of my background, I viewed these as technical problems that required technical solutions: better architecture, a better engineering process, better discipline, focus, or product vision The business and marketing functions of a startup should be considered as important as engineering and product development and therefore deserve an equally rigorous methodology to guide them. ### Five principles of Lean Startup 1. **Entrepreneurs are everywhere** and the Lean Startup approach can work in any size company, even a very large enterprise, in any sector or industry 2. **Entrepreneurship is management**. “entrepreneur” should be considered a job title in all modern companies that depend on innovation for their future growth. 3. **Validated learning**. Startups exist to learn how to build a sustainable business. This learning can be validated scientifically by running frequent experiments that allow entrepreneurs to test each element of their vision. 4. **Build-Measure-Learn**. Turn ideas into products, measure how customers respond, and then learn whether to pivot or persevere 5. **Innovation accounting**. We need focus on the boring stuff: how to measure progress, how to set up milestones, and how to prioritize work ### Why startups fail? Planning and forecasting are only accurate when based on a long, stable operating history and a relatively static environment. Startups have neither. ## Lean Startup method Many entrepreneurs take a “just do it” attitude, avoiding all forms of management, process, and discipline. Unfortunately, this approach leads to chaos more often than it does to success. Progress in manufacturing is measured by the production of high-quality physical goods. As we’ll see in Chapter 3, the Lean Startup uses a different unit of progress, called **validated learning**. Consider the recommendation that you build cross-functional teams and hold them accountable to what we call learning milestones instead of organizing your company into strict functional departments (marketing, sales, information technology, human resources, etc.) that hold people accountable for performing well in their specialized areas. When people are used to evaluating their productivity locally, they feel that a good day is one in which they did their job well all day. When I worked as a programmer, that meant eight straight hours of programming without interruption. That was a good day. In contrast, if I was interrupted with questions, process, or—heaven forbid—meetings, I felt bad > Code and product features were tangible to me. Learning, by contrast, is frustratingly intangible. **The goal of a startup is to figure out the right thing to build—the thing customers want and will pay for—as quickly as possible**. Every new version of a product, every new feature, and every new marketing program is an attempt to improve this engine of growth ### Lean Startup Instead of making complex plans that are based on a lot of assumptions, you can make constant adjustments with a steering wheel called the **Build-Measure-Learn feedback loop**. Startups also have a true north, a destination in mind: creating a thriving and world-changing business. I call that a startup’s vision. Startups employ a strategy, which includes a business model, a product road map, a point of view about partners and competitors, and ideas about who the customer will be. The product is the end result of this strategy. Less frequently, the strategy may have to change (called a pivot). However, the overarching vision rarely changes. Entrepreneurs are committed to seeing the startup through to that destination. ## Define Entrepreneurial prerequisites: proper team structure, good personnel, a strong vision for the future and an appetite for risk taking. > A startup is a human institution designed to create a new product or service under conditions of **extreme uncertainty** Take a note that it does not say anything about the size of the company. Anything customers experience from their interaction with a company should be considered part of that company's product. _Clayton Christensten The Innovator's Dilemma_: Companies very good at incremental improvements to existing products and serving customers (_sustaining innovation_), but struggle to create breakthrough new products (_disruptive innovation_) that can create new sustainable sources of growth. Innovation is a bottoms-up, decentralized, and unpredictable thing. It does not mean it cannot be managed. Cultivating entrepreneurship is the responsibility of senior management. Leadership requires creating conditions that enable employees to do the kinds of experimentation that entrepreneurship requires. ## Learn As an engineer or manager, people are accustomed to measure progress by making sure work proceeded according to the plan, it is high quality and cost fits projections. As an entrepreneur, this might not be the best way of measuring progress. **What if we found ourselves building something that nobody wants?** If the fundamental goal of entrepreneurship is to engage in organization building under conditions of extreme uncertainty, its most vital function is learning. We must learn what customers really want, not what they say they want or what we think they should want. Validated-learning is not after-the-fact rationalization or a good story designed to hide failure. It's a rigorous method for demonstrating progress. It's a way of demonstrating empirically that a team has discovered valuable truths about a startup's present and future business prospects. The question is not \"Can this product be built?\" but more like \"Should this product be built?\" or \"Can we build a sustainable business around this set of products and services?\". **Everything a startup does is understood to be an experiment designed to achieve validated learning.** ## Experiment **If the plan is to see what happens, a team is guaranteed to succeed – at seeing what happens – but won't necessarily gain validated learning**. If you cannot fail, you cannot learn. A true experiment follows the scientific method. It begins with clear hypothesis that makes predictions and it then tests predictions empirically. Startup experimentation is guided by startup's vision. The goal of startups is to discover how to build a sustainable business around that vision. The two most important assumptions entrepreneurs make are: - The _value hypothesis_ tests whether a product or service really delivers value to customers. Experiments provide a more accurate gauge. - The _growth hypothesis_ tests how new customers will discover a product or service. The point is not to find the average customer but to find _early adopters_. Those customers tend to be more forgiving of mistakes and are especially eager to give feedback. ### An experiment is a product Good questions for the team to answer why developing product: - Do consumers recognise that they have the problem you are trying to solve? - If there was a solution, would they buy it? - Would they buy it from us? - Can we build a solution for that problem? > **Success is not delivering a feature; success is learning how to solve the customer's problem.** # How vision leads to steering - **Qualitative feedback**: What customers like and don't like. - **Quantiative feedback**: How many customers use the product and find it valuable. The riskiest elements of a startup's plan are the _leap-of-faith_ assumptions. The two most important ones are the **value hypothesis** and the **growth hypothesis**. Once clear on these leap-of-faith assumptions the first step is to enter the Build phase as quickly as possible with a minimum viable product (MVP). **MVP**: Is the version of the product that enables a full turn of the _Build-Measure-Learn_ loop with the minimum amount of effort and the least amount of development time. Lacks many features that may prove essential later on. **We must be able to measure its impact**. We also need to get in front of potential customers to gauge their reactions. The biggest challenge once we get into the _Measure_ phase is determining if the product development efforts are leading to real progress. We do this by a method called _**innovation accounting**_. Innovation accounting is a quantitative approach that allow us to create _learning milestones_ instead of the traditional business and product milestones. Upon completing the _Build-Measure-Learn_ loop we confront the most difficult question any entrepreneur faces: whether to **pivot** the original strategy or persevere. **Planning works in the reverse order: we figure out what we need to learn, use innovation accounting to figure out what we need to measure to know if we are gaining validated learning, and then figure out what product we need to build to run that experiment and get that measurement**. ## Leap ### Strategy is based on assumptions Every business plan begins with a set of assumptions. A startup early efforts should be to test them as quickly as possible. The first challenge for an entrepreneur is to build an organization that can test these assumptions systematically. The second challenge is to perform that rigorous testing without losing sight of the company's overall vision. What differentiates the success stories from the failures is that the successful entrepreneurs had the foresight, the ability, and the tools to discover which part of their plans were working brilliantly and which were misguided, and adapt their strategies accordingly. ### Growth The first step in understanding a new product or service is to figure out if it is fundamentally value-creating or value-destroying. It's essential that entrepreneurs understand the reasons behind a startup's growth. There are many value-destroying kinds of growth that should be avoided (a business that grows through continuos fund-raising from investors and lots of paid advertising but does not develop a value-creating product). ### Design and customer archetype The goal of the early contact with customers is not to gain definitive answers but to clarify at a basic level that we understand our potential customer and what problems they have. **The archetype is a brief document that represents a target customer and serves as a guide for product development.** An archetype is an hypothesis, not a fact. ### Analysis paralysis There are two ever-present dangers: - **Just-do-it** school of entrepreneurship are impatient to get started and don't want to spend time analyzing their strategy. - Others fall victim to **analysis paralysis**, talking to customers, reading research reports and whiteboard strategizing are all equally unhelpful. How do entrepreneurs know when to stop analyzing and start building? The answer is a concept called Minimum Viable Product. ## Test An **MVP** is simply the fastest way to get through the _Build-Measure-Learn_ feedback loop with the minimum amount of effort. The goal of an MVP is to begin the process of learning, not end it. Unlike a prototype or concept test, an MVP is designed not just to answer a product design or technical questions but to **test fundamental business hypothesis**. ### First products aren't mean to be perfect Before new products can be sold successfully to the mass market, they have to be sold to early adopters. ### The concierge minimum viable product This is a personal in-home visits and manual works (no software) just to learn as fast as possible. In a concierge MVP, the personalized service is not the product but the learning activity designed to test the leap-of-faith assumptions in the company's growth model. **Wizard of Oz test**: Customers believe they are interacting with the actual product but behind the scenes human beings are doing the work. ### The role of quality and design in an MVP It challenges the traditional notions of quality. > If we do not know who the customer is, we do not know what quality is. MVPs require the courage to put one's assumptions to the test. **The Lean Startup method is not opposed to building high-quality products**, but only in service of the goal of winning over customers. This does not mean operating in a sloppy or undisciplined way. There is a category of quality problems that have a net effect of slowing down the _Build-Measure-Learn_ feedback loop. Defects make it more difficult to evolve the product. They actually interfere with our ability to learn and so are dangerous to tolerate in any production process. Instead of reducing the quality, reduce the scope: remove any feature process, or effort that does not contribute directly to the learning seek. ## Measure A startup job is to: 1. Rigorously measure where it is right now. 2. Devise experiments to learn how to move the real numbers closer to the ideal reflected in the business plan. ### Accountability framework It begins by turning the leap-of-faith assumptions into quantitative financial model. **The rate of growth depends primarily on three things: the profitability of each customer, the cost of acquiring new customers, and the repeat purchase rate of existing customers.** ### Three learning milestones First, use an MVP to establish real data on where the company is right now. Second, startups must attempt to tune the engine from the baseline towards the ideal. Then the company reaches a decision point. Third: Pivot or persevere. If the company is making good progress toward the ideal, that means it's learning appropriately and using that learning effectively. ### Establish the baseline Smoke tests (ability to preorder a product that is yet to be built) with its marketing materials. It will measure if customers are interested in trying a product. These MVPs provide the first example of _learning milestone_. When one is choosing among the many assumptions in the business plan, it makes sense to test the riskiest assumptions first. ### Tuning the engine Every product development, marketing, or other initiative that a startup undertakes should be targeted at **improving one of the drivers of its growth model**. Remember that a good design is one that changes customer behavior for the better. ### Pivot or persevere If we are not moving the drivers of our business model, we are not making progress. That becomes a sure sign that it's time to pivot. ### Improving a product on five dollars a day > We tracked the \"funnel metrics\" behaviours that were critical to our engine of growth. Five dollars bought us a hundred clicks every day. From a marketing point of view this was not very significant, but for learning it was priceless. Every single day we were able to measure our product's performance with a brand new set of customers. Each day was a new experiment. ### Cohort analysis Instead of looking at cumulative totals or gross numbers such as total revenue and total number of customers, one looks at the performance of customers that comes into contact with the product independently. > Out of frustration of not knowing what to do I was finally ready to turn to the last resort: talking to customers. I was ready to ask the right questions. ### Optimization versus learning Engineers, designers and marketers are all skilled at optimization. A startup has to measure progress against a high bar: evidence that a sustainable business can be built around its products or services. This can only be assessed only if a startup has made clear, tangible predictions ahead of time. ### Actionable metrics versus vanity metrics How do we know which features to prioritize? How can we get more customers to sign up and pay? How can we get out the word about our product? ### Cohorts and split-tests > Instead of looking at gross metrics, _Grockit_ switched to cohort-based metrics, and instead of looking for cause-and-effect relationships after the fact, _Grockit_ would launch each new feature as a true split-test experiment. Many features that make the product better in the eyes of engineers and designers have no impact on customer behaviour. ### The value of the three a's Three A's of metrics: - **Actionable**: It must demonstrate clear cause and effect. - **Accessible**: Reports as simple as possible so everyone understands them. Use tangible, concrete units. Cohort-based reports are the gold standard of metrics: they turn complex actions into people reports. Reports deal with people and their actions. Accessibility also refers to widespread access to the reports. - **Auditable**: The data is credible to employees. The loser of the argument would challenge the veracity of the data. **We need to test the data by hand by talking to customers. This is the only way to be able to check if the reports contain true facts.** This also has the benefit to giving insight into why customers are behaving the way the data indicate. ## Pivot (or persevere) Pivot: A structured course correction designed to test a new fundamental hypothesis. The heart of the scientific method is the realization that although human judgment may be faulty, we can improve our judgment by subjecting to theories to repeated testing. Startup productivity is not about cranking out more widgets or features. It is about aligning our efforts with a business and product that are working to create value and drive growth. **The problem with the notion of shipping a product is that you are guaranteed to succeed at seeing what happens.** Direct contact with customers proved essential. A startup's runway is the number of pivots it can still make. ### Pivots require courage Entrepreneurs need to face their fears and be willing to fail, often in a public way. Run away from vanity metrics as they form false conclusions and create an alternate private reality. #### The pivot or persevere meeting **The decreasing effectiveness of product experiments and the general feeling that product development should be more productive. Whenever you see those symptoms, consider a pivot.** #### Catalog of pivots - **Zoom-in pivot**: What previously was considered a single feature in a product becomes the whole product. - **Zoom-out pivot**: Sometimes a single feature is insufficient to support the whole product. - **Consumer segment pivot**: The company realizes that the product it is building solves a real problem for real customers but that they are not the type of customers it originally planned to serve. - **Customer need pivot**: It sometimes becomes clear that the problem we're trying to solve for them is not very important, we discover other related and more important problems. - **Platform pivot**: From an application to a platform or vice versa. - **Business architecture pivot**: Two major business architectures: High margin, low volume (complex systems) or low margin, high volume (volume operations model). - **Value capture pivot**: Capture the value of a company creates. Monetization or revenue models. Capturing value is an intrinsic part of the product hypothesis. - **Engine of growth pivot**: Three primary engines of growth that power startups: the viral, sticky and paid growth models. - **Channel pivot**: The mechanism by which a company delivers its product to customers is called the sales channel or distribution channel. A channel pivot is a recognition that the same basic solution could be delivered through a different channel with greater effectiveness. _It is precisely because of its destructive effect on sales channels that the Internet has had such a disruptive influence in industries that previously required complex sales and distribution channels._ - **Technology pivot**: A company discovers a way to achieve the same solution by using a completely different technology. The only question is whether the new technology can provide superior price and/or performance compared with existing technology. #### A pivot is a strategic hypothesis A pivot is better understood as a new strategic hypothesis that will require a new minimum viable product to test. Even after a company achieves initial success, it must continue to pivot. It's a special kind of structured change designed to test a new fundamental hypothesis about the product, business model, and engine of growth. ## Accelerate How much time and energy should companies invest in infrastructure and planning early on in _anticipation_ of success? Spend too much and you waste precious time that could have been spent learning. Spend too little and you may fail to take advantage of early success and cede market leadership to a fast follower. Traditional departments create incentive structures that keep people focused on excellence in their specialities: marketing, sales, product development. The critical first question for any lean transformation is: which activities create value and which are a form of waste? What products do customers really want? How will our business grow? Who is our customer? Which customers should we listen to and which should we ignore? These are the questions that need answering as quickly as possible to maximize a startup's chances of success. Today's companies must learn to master a management portfolio of sustainable and disruptive innovation. ### Batch > Daddy, first you should fold all of the newsletters. Then you should attach the seal. Then you should put the stamps. Their father wanted to do it the counterintuitive way: complete each envelope one at a time. They - like most of us - thought that was backward \"That wouldn't be efficient!\" **Doing it one at a time is faster**. Intuition does not take into account the extra time to sort, stack and move around the large piles of half-complete envelopes when it's done the other way. In process-oriented work like this, individual performance is not nearly as important as the overall performance of the system. The small-batch approach produces a finished product every few seconds, whereas the large-batch approach must deliver all the product at once, at the end. What if it turns out that the customers have decided they don't want the product? Which process would allow a company to find this out sooner? Lean manufacturers discovered the benefits of small batches ago. Innovators as Taiichi Ohno, Shigeo Shingo and others found a way to succeed by using small batches. Instead of buying large specialized machines that could produce thousands of parts at a time, Toyota used smaller general-purpose machines that could produce a wide variety of parts in small batches. Because of its smaller batch size, Toyota was able to produce a much greater diversity of products. **The biggest benefit of working in small batches is that quality problems can be identified much sooner.** This is the origin of Toyota's famous _andon_ cord, which allows any worker to ask for help as soon as they notice any problem, such a defect in physical part, stopping the entire production line if it cannot be corrected immediately. It can interrupt the flow as the line is halted repeatedly. The benefits of finding and fixing problems faster outweigh this cost. This process of continuously driving out defects has been a win-win for Toyota and its customers. #### Small batches in entrepreneurship In the Lean Startup the goal is not to produce more stuff efficiently but to learn how to build a sustainable business. **as quickly as possible**. Working in small batches ensures that a startup can minimize the expenditure of time, money, and effort that ultimately turns out to have been wasted. Nowadays large batches are still the rule. The work that goes into the development of a new product proceeds on a virtual assembly line. Product managers figure out what features are likely to please customers; product designers then figure out how those features should look and feel. These designs are passed to engineering, which builds something new or modifies an existing product and, once this is done, hands it off to somebody responsible for verifying that the new product works the way the product managers and designers intended Instead of working in separate departments, engineers and designers would work together side by side on one feature at a time. Whenever that feature was ready to be tested with customers, they immediately would release a new version of the product, which would go live on our website for a relatively small number of people. #### Continuous deployment beyond software - **Hardware becoming software.** What can be built out of software can be modified much faster than a physical or mechanical device can. - **Fast production changes**. When the design changes, there is no excess inventory of the old version to slow things down. Since machines are designed for rapid changeovers, as soon as the new design is ready, new version can be produced quickly. - **3D printing and rapid prototyping tools**. By reducing the batch size, we can get through the Build-Measure-Learn feedback loop more quickly than our competitors can. ## Growth ### Where does growth come from? Sustainable growth is characterized by one simple rule: New customers come from the actions of past customers. - **Word of mouth**. Natural level of growth that is caused by satisfied customers' enthusiasm for the product. - **As a side effect of product usage**. When you see someone dressed int he latest clothes or driving a certain car, you may be influenced to by that product. - **Through funded advertising**. As long as the cost of acquiring a new customer (the so-called marginal cost) is less than the revenue of that customer generates (the marginal revenue), the excess (the marginal profit) can be used to acquire more customers. The more marginal profit, the faster growth. - **Through repeat purchase or use.** Some products are designed to be purchased repeatedly either through a subscription plan or through voluntary repurchases. ### The three engines of growth There are always a zillion new ideas about how to make the product better floating around, but the hard truth is that most of those ideas make a difference only at the margins. They are mere optimizations. Startups have the focus on the big experiments that lead to validated learning. #### The sticky engine of growth Products are designed to attract and retain customers for the long term. There is an expectation that once you start using their product, you'll continue to do so. Companies using the sticky engine of growth track their attrition rate or churn rate very carefully. The churn rate is defined as the fraction of customers in any period who fail to remain engaged with the company's product. The rules that govern the sticky engine of growth are pretty simple: if the rate of new customer acquisition exceeds the churn rate, the product will grow. The speed of growth is determined by what I call the rate of compounding, which is simple the natural growth rate minus the churn rate. Example: 61% retention rate, 31% growth rate, compounding growth rate of just 0.02%, almost zero. #### The viral engine of growth The viral engine is powered by a feedback loop that can be quantified. It is called the _viral loop_, and its speed is determined by a single mathematical term called the _viral coefficient_. The higher this coefficient is, the faster the product will spread. How many friends will each customer bring with him or her? A viral loop with a coefficient that is greater than 1.0 will grow exponentially. Many viral products do not charge customers directly but rely on indirect sources of revenue such as advertising. This is the case because viral products cannot afford to have any friction impede the process of signing customers up and recruiting their friends. #### The paid engine of growth If either company wants to increase its rate of growth, it can do so in one of two ways: increase the revenue from each customer or drive down the cost of acquiring a new customer. The paid engine of growth is powered by a feedback loop. Each customer pays a certain amount of money for the product over his or her \"lifetime\" as a customer. Once variable costs are deducted, this usually is called customer _lifetime value_ (LTV). This revenue can be invested in growth by buying advertising. Example: If the CPA remains at $2 but the LTV falls bellow $2, the company's growth will slow down. It may make up the difference with one-time tactics such as using invested capital or publicity stunts, but those tactics are not sustainable. ### Technical caveat More than one engine of growth can operate in a business at a time. It's strongly recommended to focus one engine at a time. What really matters is not the raw numbers or the vanity metrics but the direction and degree of progress. ",
    "url": "/learning-notes/books/the-lean-startup/",
    "relUrl": "/books/the-lean-startup/"
  }
}
